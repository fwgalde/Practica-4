(undo-tree-save-format-version . 1)
"b4d157d2cb74ea26cc05f260e9aabee926a73224"
[nil nil nil nil (25221 54503 692178 295000) 0 nil]
([nil nil ((1 . 7) (t . -1)) nil (25221 54503 692173 734000) 0 nil])
([nil nil ((#("clas" 0 2 (face font-lock-variable-name-face fontified t) 2 3 (face font-lock-variable-name-face fontified t) 3 4 (face font-lock-variable-name-face fontified t)) . -3) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (undo-tree-id14 . -4) 7) nil (25221 54503 692167 704000) 0 nil])
([nil nil ((#("c " 0 1 (fontified t) 1 2 (fontified t)) . -1) (undo-tree-id0 . -2) (undo-tree-id1 . -2) (undo-tree-id2 . -2) (undo-tree-id3 . -2) (undo-tree-id4 . -2) (undo-tree-id5 . -2) (undo-tree-id6 . -2) (undo-tree-id7 . -2) (undo-tree-id8 . -2) (undo-tree-id9 . -2) (undo-tree-id10 . -2) (undo-tree-id11 . -2) 3) nil (25221 54503 692148 204000) 0 nil])
([nil nil ((1 . 7)) nil (25221 54503 692039 121000) 0 nil])
([nil nil ((#("E> {
	       " 0 1 (face font-lock-type-face fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t) 2 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 12 (fontified t) 12 13 (fontified t)) . -62) (undo-tree-id269 . -13) 75 (#(" " 0 1 (fontified t)) . -74) (undo-tree-id270 . -1) (#(" " 0 1 (fontified nil)) . -75) (undo-tree-id271 . -1) (#("	" 0 1 (fontified nil)) . 76) (undo-tree-id272 . -1) (68 . 76) 69 (#("public" 0 1 (face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 4 (face font-lock-keyword-face fontified t) 4 5 (face font-lock-keyword-face fontified t) 5 6 (face font-lock-keyword-face fontified t)) . -69) (undo-tree-id273 . -6) 75 (68 . 69) (#("    " 0 4 (fontified t)) . -68) 72 (89 . 90) (83 . 89) (#("m" 0 1 (face font-lock-variable-name-face fontified t)) . -83) (undo-tree-id274 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -84) (undo-tree-id275 . -1) 85 (81 . 85) (80 . 81) (72 . 80) (#("u" 0 1 (fontified t)) . -72) (undo-tree-id276 . -1) (#("p" 0 1 (fontified t)) . -73) (undo-tree-id277 . -1) 74 (72 . 74) (67 . 72) (68 . 69) (#("	" 0 1 (fontified nil)) . 67) (undo-tree-id278 . -1) (68 . 69) (32 . 33) (#("    " 0 4 (fontified nil)) . -32) 36 (69 . 71) (68 . 70) (65 . 68) (61 . 65) (#("O" 0 1 (face font-lock-type-face fontified t)) . -61) (undo-tree-id279 . -1) (#("d" 0 1 (fontified t)) . -62) (undo-tree-id280 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -63) (undo-tree-id281 . -1) 64 (46 . 64) (#("class" 0 1 (face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (face font-lock-keyword-face fontified t) 4 5 (c-type c-decl-type-start face font-lock-keyword-face fontified t)) . -46) (undo-tree-id282 . -5) 51 (37 . 51) (36 . 37) (37 . 41) (32 . 36) (32 . 34) (#("}" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . -33) (undo-tree-id283 . -1) (undo-tree-id284 . 1) (undo-tree-id285 . -1) 34 (#("
" 0 1 (fontified t)) . -31) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (#("@" 0 1 (fontified t)) . -32) (undo-tree-id288 . -1) 33 (#("Override
" 0 8 (face c-annotation-face fontified t) 8 9 (fontified t)) . -33) (undo-tree-id289 . -9) 42 (#("protected " 0 8 (face font-lock-keyword-face fontified t) 8 9 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 9 10 (fontified t)) . -42) (undo-tree-id290 . -10) 52 (#("Object " 0 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face c-type c-decl-id-start fontified t) 6 7 (fontified t)) . -52) (undo-tree-id291 . -7) 59 (#("clone() " 0 5 (face font-lock-function-name-face fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t) 7 8 (fontified t)) . -59) (undo-tree-id292 . -8) 67 (#("throws " 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t)) . -67) (undo-tree-id293 . -7) 74 (#("CloneNotSupportedException {
    // " 0 26 (face font-lock-type-face fontified t) 26 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-2-face) fontified t) 28 29 (fontified t) 29 33 (c-is-sws t c-in-sws t fontified t) 33 34 (face font-lock-comment-delimiter-face c-in-sws t c-is-sws t fontified t) 34 36 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . -74) (undo-tree-id294 . -36) 110 (#("TODO " 0 5 (face font-lock-comment-face c-in-sws t fontified nil)) . -110) (undo-tree-id295 . -5) 115 (#("Auto-" 0 5 (face font-lock-comment-face c-in-sws t fontified nil)) . -115) (undo-tree-id296 . -5) 120 (#("generated " 0 10 (face font-lock-comment-face c-in-sws t fontified nil)) . -120) (undo-tree-id297 . -10) 130 (#("method " 0 7 (face font-lock-comment-face c-in-sws t fontified nil)) . -130) (undo-tree-id298 . -7) 137 (#("stub
    " 0 4 (face font-lock-comment-face c-in-sws t fontified t) 4 5 (c-in-sws t face font-lock-comment-face fontified t) 5 6 (c-in-sws t c-is-sws t fontified nil) 6 9 (c-in-sws t c-is-sws t fontified nil)) . -137) (undo-tree-id299 . -9) 146 (#("return " 0 1 (face font-lock-keyword-face c-is-sws t fontified t) 1 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t)) . -146) (undo-tree-id300 . -7) 153 (#("super." 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . -153) (undo-tree-id301 . -6) 159 (#("clone();" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (fontified t)) . -159) (undo-tree-id302 . -8) 167 (142 . 146) (#("	" 0 1 (c-in-sws t c-is-sws t fontified nil)) . 142) (103 . 107) (#("	" 0 1 (fontified nil)) . 103) (32 . 163) (#("clone() : Object" 0 16 (fontified nil)) . -32) (32 . 48) (#("    " 0 4 (fontified nil)) . 32) (undo-tree-id303 . -4) (36 . 37) (31 . 36) (30 . 31) (12 . 30) (#(" " 0 1 (fontified t)) . -12) (undo-tree-id304 . -1) 13 (6 . 13) (t 25221 54503 706766 280000)) nil (25221 54743 36747 520000) 0 nil])
([nil nil ((#("c clas " 0 1 (face font-lock-keyword-face fontified nil) 1 2 (fontified nil) 2 5 (face font-lock-keyword-face fontified nil) 5 6 (face font-lock-keyword-face fontified nil) 6 7 (fontified nil)) . 6) (undo-tree-id214 . -6) (undo-tree-id215 . -7) (undo-tree-id216 . -6) (12 . 13) (#("s ArbolBinario<T> " 0 1 (c-type c-decl-type-start face font-lock-keyword-face fontified nil) 1 2 (fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (face font-lock-type-face fontified nil) 4 5 (face font-lock-type-face fontified nil) 5 6 (face font-lock-type-face fontified nil) 6 7 (face font-lock-type-face fontified nil) 7 8 (face font-lock-type-face fontified nil) 8 9 (face font-lock-type-face fontified nil) 9 10 (face font-lock-type-face fontified nil) 10 11 (face font-lock-type-face fontified nil) 11 12 (face font-lock-type-face fontified nil) 12 13 (face font-lock-type-face fontified nil) 13 14 (face font-lock-type-face fontified nil) 14 15 (face (rainbow-delimiters-depth-1-face) category c-<-as-paren-syntax fontified nil) 15 16 (face font-lock-type-face fontified nil) 16 17 (face (rainbow-delimiters-depth-1-face) category c->-as-paren-syntax fontified nil) 17 18 (fontified nil)) . 12) (undo-tree-id217 . -18) (undo-tree-id218 . -18) (undo-tree-id219 . -18) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 30) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (#("
    " 0 1 (fontified nil) 1 5 (fontified nil)) . 31) (undo-tree-id223 . -1) (undo-tree-id224 . -5) (undo-tree-id225 . -1) (#("}" 0 1 (face (rainbow-delimiters-unmatched-face) fontified nil)) . 36) (undo-tree-id226 . 1) (undo-tree-id227 . 1) (32 . 36) (#("clone() : Object" 0 16 (fontified nil)) . 32) (32 . 48) (#("@Override
protected Object clone() throws CloneNotSupportedException {
	// TODO Auto-generated method stub
	return super.clone();
}" 0 1 (fontified nil) 1 9 (face c-annotation-face fontified nil) 9 10 (fontified nil) 10 18 (face font-lock-keyword-face fontified nil) 18 19 (face font-lock-keyword-face fontified nil) 19 20 (fontified nil) 20 25 (face font-lock-type-face fontified nil) 25 26 (face font-lock-type-face fontified nil) 26 27 (fontified nil) 27 32 (face font-lock-function-name-face fontified nil) 32 33 (face (rainbow-delimiters-depth-2-face) fontified nil) 33 34 (face (rainbow-delimiters-depth-2-face) fontified nil) 34 35 (fontified nil) 35 41 (face font-lock-keyword-face fontified nil) 41 42 (fontified nil) 42 68 (face font-lock-type-face fontified nil) 68 69 (fontified nil) 69 70 (face (rainbow-delimiters-depth-2-face) fontified nil) 70 71 (fontified nil) 71 72 (fontified nil) 72 73 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified nil) 73 75 (c-in-sws t face font-lock-comment-delimiter-face fontified nil) 75 80 (c-in-sws t face font-lock-comment-face fontified nil) 80 85 (c-in-sws t face font-lock-comment-face fontified nil) 85 95 (c-in-sws t face font-lock-comment-face fontified nil) 95 102 (c-in-sws t face font-lock-comment-face fontified nil) 102 106 (c-in-sws t face font-lock-comment-face fontified nil) 106 107 (c-in-sws t face font-lock-comment-face fontified nil) 107 108 (c-in-sws t c-is-sws t fontified nil) 108 109 (c-is-sws t face font-lock-keyword-face fontified nil) 109 114 (face font-lock-keyword-face fontified nil) 114 115 (fontified nil) 115 120 (face font-lock-keyword-face fontified nil) 120 121 (fontified nil) 121 126 (fontified nil) 126 127 (face (rainbow-delimiters-depth-3-face) fontified nil) 127 128 (face (rainbow-delimiters-depth-3-face) fontified nil) 128 129 (fontified nil) 129 130 (fontified nil) 130 131 (face (rainbow-delimiters-unmatched-face) fontified nil c-is-sws t)) . 32) (undo-tree-id228 . -130) (undo-tree-id229 . -130) (undo-tree-id230 . 1) (undo-tree-id231 . -130) (undo-tree-id232 . 1) (103 . 104) (#("    " 0 4 (c-is-sws t c-in-sws t fontified nil)) . 103) (142 . 143) (#("    " 0 1 (c-in-sws t c-is-sws t fontified nil) 1 4 (c-in-sws t c-is-sws t fontified nil)) . 142) (31 . 167) (33 . 34) (#("

" 0 1 (fontified nil) 1 2 (fontified nil)) . 32) (undo-tree-id233 . 2) (undo-tree-id234 . 2) (#("    " 0 4 (fontified nil)) . 32) (undo-tree-id235 . -4) (undo-tree-id236 . -4) (undo-tree-id237 . -4) (#("    " 0 4 (fontified t)) . 37) (#("p" 0 1 (face font-lock-keyword-face fontified nil)) . 36) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (#("rotected class" 0 1 (face font-lock-keyword-face fontified nil) 1 3 (face font-lock-keyword-face fontified nil) 3 4 (face font-lock-keyword-face fontified nil) 4 5 (face font-lock-keyword-face fontified nil) 5 6 (face font-lock-keyword-face fontified nil) 6 7 (face font-lock-keyword-face fontified nil) 7 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 10 (face font-lock-keyword-face fontified nil) 10 11 (face font-lock-keyword-face fontified nil) 11 12 (face font-lock-keyword-face fontified nil) 12 13 (face font-lock-keyword-face fontified nil) 13 14 (face font-lock-keyword-face fontified nil)) . 37) (undo-tree-id241 . -9) (undo-tree-id242 . -14) (undo-tree-id243 . -9) (46 . 51) (#("private class NOdo" 0 1 (face font-lock-keyword-face fontified nil) 1 3 (face font-lock-keyword-face fontified nil) 3 4 (face font-lock-keyword-face fontified nil) 4 5 (face font-lock-keyword-face fontified nil) 5 6 (face font-lock-keyword-face fontified nil) 6 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil) 8 9 (face font-lock-keyword-face fontified nil) 9 10 (face font-lock-keyword-face fontified nil) 10 11 (face font-lock-keyword-face fontified nil) 11 12 (face font-lock-keyword-face fontified nil) 12 13 (c-type c-decl-type-start face font-lock-keyword-face fontified nil) 13 14 (fontified nil) 14 15 (face font-lock-type-face fontified nil) 15 16 (face font-lock-type-face fontified nil) 16 17 (fontified nil) 17 18 (face font-lock-type-face fontified nil)) . 46) (undo-tree-id244 . -15) (undo-tree-id245 . -18) (undo-tree-id246 . -15) (61 . 64) (#("odo<" 0 1 (face font-lock-type-face fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (fontified nil)) . 61) (undo-tree-id247 . -4) (undo-tree-id248 . -3) (undo-tree-id249 . -4) (#("E> " 0 1 (face font-lock-type-face fontified nil) 1 2 (face (rainbow-delimiters-depth-2-face) fontified nil) 2 3 (fontified nil)) . 65) (undo-tree-id250 . -3) (undo-tree-id251 . -3) (#("{}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 68) (undo-tree-id252 . -1) (undo-tree-id253 . 1) (undo-tree-id254 . -1) (undo-tree-id255 . 1) (#("
	" 0 1 (fontified nil) 1 2 (fontified nil)) . 69) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (32 . 36) (#("	" 0 1 (fontified nil)) . 32) (#("
" 0 1 (fontified nil)) . 68) (undo-tree-id258 . 1) (undo-tree-id259 . 1) (67 . 68) (#("	" 0 1 (fontified nil)) . 68) (#("	    " 0 1 (fontified nil) 1 5 (fontified nil)) . 67) (undo-tree-id260 . -5) (undo-tree-id261 . -5) (#("up" 0 1 (fontified nil) 1 2 (fontified nil)) . 72) (72 . 74) (#("public E" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 4 (face font-lock-keyword-face fontified nil) 4 5 (face font-lock-keyword-face fontified nil) 5 6 (face font-lock-keyword-face fontified nil) 6 7 (fontified nil) 7 8 (face font-lock-type-face fontified nil)) . 72) (undo-tree-id262 . -8) (undo-tree-id263 . -8) (undo-tree-id264 . 1) (#(" " 0 1 (fontified nil)) . 80) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#("elme" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (face font-lock-variable-name-face fontified nil) 3 4 (face font-lock-variable-name-face fontified nil)) . 81) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (83 . 85) (#("emento" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil)) . 83) (#(";" 0 1 (fontified nil)) . 89) (68 . 72) (#("	" 0 1 (fontified nil)) . 68) (69 . 75) (#("        " 0 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil)) . 68) (74 . 77) (62 . 75) 61) nil (25221 54743 36609 228000) 0 nil])
([nil nil ((#("E> {
	       " 0 1 (face font-lock-type-face fontified nil) 1 2 (face (rainbow-delimiters-depth-2-face) fontified nil) 2 3 (fontified nil) 3 4 (face (rainbow-delimiters-depth-2-face) fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 12 (fontified nil) 12 13 (fontified nil)) . 62) (#("  	" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 74) (68 . 76) (#("public" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 4 (face font-lock-keyword-face fontified nil) 4 5 (face font-lock-keyword-face fontified nil) 5 6 (face font-lock-keyword-face fontified nil)) . 69) (68 . 69) (#("    " 0 4 (fontified nil)) . 68) (83 . 90) (#("me" 0 1 (face font-lock-variable-name-face fontified nil) 1 2 (face font-lock-variable-name-face fontified nil)) . 83) (72 . 85) (#("up" 0 1 (fontified nil) 1 2 (fontified nil)) . 72) (67 . 74) (68 . 69) (#("	" 0 1 (fontified nil)) . 67) (68 . 69) (32 . 33) (#("    " 0 4 (fontified nil)) . 32) (69 . 71) (61 . 70) (#("Odo" 0 1 (face font-lock-type-face fontified nil) 1 2 (fontified nil) 2 3 (face font-lock-type-face fontified nil)) . 61) (46 . 64) (#("class" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (face font-lock-keyword-face fontified nil) 4 5 (face font-lock-keyword-face fontified nil)) . 46) (36 . 51) (37 . 41) (32 . 36) (32 . 34) (#("}" 0 1 (face (rainbow-delimiters-unmatched-face) fontified nil)) . 33) (#("
@Override
protected Object clone() throws CloneNotSupportedException {
    // TODO Auto-generated method stub
    return super.clone();" 0 1 (fontified nil) 1 2 (fontified nil) 2 10 (face c-annotation-face fontified nil) 10 11 (fontified nil) 11 19 (face font-lock-keyword-face fontified nil) 19 20 (face font-lock-keyword-face fontified nil) 20 21 (fontified nil) 21 26 (face font-lock-type-face fontified nil) 26 27 (face font-lock-type-face fontified nil) 27 28 (fontified nil) 28 33 (face font-lock-function-name-face fontified nil) 33 34 (face (rainbow-delimiters-depth-2-face) fontified nil) 34 35 (face (rainbow-delimiters-depth-2-face) fontified nil) 35 36 (fontified nil) 36 42 (face font-lock-keyword-face fontified nil) 42 43 (fontified nil) 43 69 (face font-lock-type-face fontified nil) 69 70 (fontified nil) 70 71 (face (rainbow-delimiters-depth-2-face) fontified nil) 71 72 (fontified nil) 72 76 (c-is-sws t c-in-sws t fontified nil) 76 77 (c-in-sws t c-is-sws t face font-lock-comment-delimiter-face fontified nil) 77 79 (c-in-sws t face font-lock-comment-delimiter-face fontified nil) 79 84 (c-in-sws t face font-lock-comment-face fontified nil) 84 89 (c-in-sws t face font-lock-comment-face fontified nil) 89 99 (c-in-sws t face font-lock-comment-face fontified nil) 99 106 (c-in-sws t face font-lock-comment-face fontified nil) 106 110 (c-in-sws t face font-lock-comment-face fontified nil) 110 111 (c-in-sws t face font-lock-comment-face fontified nil) 111 112 (c-in-sws t c-is-sws t fontified nil) 112 115 (c-in-sws t c-is-sws t fontified nil) 115 116 (c-is-sws t face font-lock-keyword-face fontified nil) 116 121 (face font-lock-keyword-face fontified nil) 121 122 (fontified nil) 122 127 (face font-lock-keyword-face fontified nil) 127 128 (fontified nil) 128 133 (fontified nil) 133 134 (face (rainbow-delimiters-depth-3-face) fontified nil) 134 135 (face (rainbow-delimiters-depth-3-face) fontified nil) 135 136 (fontified nil)) . 31) (142 . 146) (#("	" 0 1 (c-in-sws t c-is-sws t fontified nil)) . 142) (103 . 107) (#("	" 0 1 (fontified nil)) . 103) (32 . 163) (#("clone() : Object" 0 16 (fontified nil)) . 32) (32 . 48) (#("    " 0 4 (fontified nil)) . 32) (12 . 37) (#(" " 0 1 (fontified nil)) . 12) (6 . 13) (t 25221 54503 706766 280000)) nil (25221 54743 36467 724000) 0 nil])
([nil nil ((#("c clas " 0 1 (face font-lock-keyword-face fontified nil) 1 2 (fontified nil) 2 5 (face font-lock-keyword-face fontified nil) 5 6 (face font-lock-keyword-face fontified nil) 6 7 (fontified nil)) . 6) (undo-tree-id171 . -6) (undo-tree-id172 . -6) (undo-tree-id173 . -6) (12 . 13) (#("s ArbolBinario<T> {
    }" 0 1 (c-type c-decl-type-start face font-lock-keyword-face fontified nil) 1 2 (fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (face font-lock-type-face fontified nil) 4 5 (face font-lock-type-face fontified nil) 5 6 (face font-lock-type-face fontified nil) 6 7 (face font-lock-type-face fontified nil) 7 8 (face font-lock-type-face fontified nil) 8 9 (face font-lock-type-face fontified nil) 9 10 (face font-lock-type-face fontified nil) 10 11 (face font-lock-type-face fontified nil) 11 12 (face font-lock-type-face fontified nil) 12 13 (face font-lock-type-face fontified nil) 13 14 (face font-lock-type-face fontified nil) 14 15 (face (rainbow-delimiters-depth-1-face) category c-<-as-paren-syntax fontified nil) 15 16 (face font-lock-type-face fontified nil) 16 17 (face (rainbow-delimiters-depth-1-face) category c->-as-paren-syntax fontified nil) 17 18 (fontified nil) 18 19 (face (rainbow-delimiters-depth-1-face) fontified nil) 19 20 (fontified nil) 20 24 (fontified nil) 24 25 (face (rainbow-delimiters-unmatched-face) fontified nil)) . 12) (undo-tree-id174 . -20) (undo-tree-id175 . -20) (undo-tree-id176 . 1) (undo-tree-id177 . -20) (undo-tree-id178 . 1) (32 . 36) (#("clone() : Object" 0 16 (fontified nil)) . 32) (32 . 48) (#("@Override
protected Object clone() throws CloneNotSupportedException {
	// TODO Auto-generated method stub
	return super.clone();
}" 0 1 (fontified nil) 1 9 (face c-annotation-face fontified nil) 9 10 (fontified nil) 10 18 (face font-lock-keyword-face fontified nil) 18 19 (face font-lock-keyword-face fontified nil) 19 20 (fontified nil) 20 25 (face font-lock-type-face fontified nil) 25 26 (face font-lock-type-face fontified nil) 26 27 (fontified nil) 27 32 (face font-lock-function-name-face fontified nil) 32 33 (face (rainbow-delimiters-depth-2-face) fontified nil) 33 34 (face (rainbow-delimiters-depth-2-face) fontified nil) 34 35 (fontified nil) 35 41 (face font-lock-keyword-face fontified nil) 41 42 (fontified nil) 42 68 (face font-lock-type-face fontified nil) 68 69 (fontified nil) 69 70 (face (rainbow-delimiters-depth-2-face) fontified nil) 70 71 (fontified nil) 71 72 (fontified nil) 72 73 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified nil) 73 75 (c-in-sws t face font-lock-comment-delimiter-face fontified nil) 75 80 (c-in-sws t face font-lock-comment-face fontified nil) 80 85 (c-in-sws t face font-lock-comment-face fontified nil) 85 95 (c-in-sws t face font-lock-comment-face fontified nil) 95 102 (c-in-sws t face font-lock-comment-face fontified nil) 102 106 (c-in-sws t face font-lock-comment-face fontified nil) 106 107 (c-in-sws t face font-lock-comment-face fontified nil) 107 108 (c-in-sws t c-is-sws t fontified nil) 108 109 (c-is-sws t face font-lock-keyword-face fontified nil) 109 114 (face font-lock-keyword-face fontified nil) 114 115 (fontified nil) 115 120 (face font-lock-keyword-face fontified nil) 120 121 (fontified nil) 121 126 (fontified nil) 126 127 (face (rainbow-delimiters-depth-3-face) fontified nil) 127 128 (face (rainbow-delimiters-depth-3-face) fontified nil) 128 129 (fontified nil) 129 130 (fontified nil) 130 131 (face (rainbow-delimiters-unmatched-face) fontified nil)) . 32) (undo-tree-id179 . -130) (undo-tree-id180 . -130) (undo-tree-id181 . 1) (undo-tree-id182 . -130) (undo-tree-id183 . 1) (103 . 104) (#("    " 0 4 (c-is-sws t c-in-sws t fontified nil)) . 103) (142 . 143) (#("    " 0 1 (c-in-sws t c-is-sws t fontified nil) 1 4 (c-in-sws t c-is-sws t fontified nil)) . 142) (31 . 167) (33 . 34) (#("

" 0 1 (fontified nil) 1 2 (fontified nil)) . 32) (undo-tree-id184 . 2) (undo-tree-id185 . 2) (#("    " 0 4 (fontified nil)) . 32) (undo-tree-id186 . -4) (undo-tree-id187 . -4) (undo-tree-id188 . -4) (#("    " 0 4 (fontified t)) . 37) (#("protected class" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 4 (face font-lock-keyword-face fontified nil) 4 5 (face font-lock-keyword-face fontified nil) 5 6 (face font-lock-keyword-face fontified nil) 6 7 (face font-lock-keyword-face fontified nil) 7 8 (face font-lock-keyword-face fontified nil) 8 9 (face font-lock-keyword-face fontified nil) 9 10 (fontified nil) 10 11 (face font-lock-keyword-face fontified nil) 11 12 (face font-lock-keyword-face fontified nil) 12 13 (face font-lock-keyword-face fontified nil) 13 14 (face font-lock-keyword-face fontified nil) 14 15 (face font-lock-keyword-face fontified nil)) . 36) (undo-tree-id189 . -10) (undo-tree-id190 . -10) (undo-tree-id191 . -10) (46 . 51) (#("private class NOdo" 0 1 (face font-lock-keyword-face fontified nil) 1 3 (face font-lock-keyword-face fontified nil) 3 4 (face font-lock-keyword-face fontified nil) 4 5 (face font-lock-keyword-face fontified nil) 5 6 (face font-lock-keyword-face fontified nil) 6 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil) 8 9 (face font-lock-keyword-face fontified nil) 9 10 (face font-lock-keyword-face fontified nil) 10 11 (face font-lock-keyword-face fontified nil) 11 12 (face font-lock-keyword-face fontified nil) 12 13 (c-type c-decl-type-start face font-lock-keyword-face fontified nil) 13 14 (fontified nil) 14 15 (face font-lock-type-face fontified nil) 15 16 (face font-lock-type-face fontified nil) 16 17 (fontified nil) 17 18 (face font-lock-type-face fontified nil)) . 46) (undo-tree-id192 . -15) (undo-tree-id193 . -15) (undo-tree-id194 . -15) (undo-tree-id195 . -14) (undo-tree-id196 . -15) (61 . 64) (#("odo<E> {}" 0 1 (face font-lock-type-face fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (category c-<-as-paren-syntax fontified nil) 4 5 (face font-lock-type-face fontified nil) 5 6 (category c->-as-paren-syntax face (rainbow-delimiters-depth-2-face) fontified nil) 6 7 (fontified nil) 7 8 (face (rainbow-delimiters-depth-2-face) fontified nil) 8 9 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 61) (undo-tree-id197 . -8) (undo-tree-id198 . -4) (undo-tree-id199 . 1) (undo-tree-id200 . -8) (undo-tree-id201 . 1) (undo-tree-id202 . -3) (undo-tree-id203 . -3) (undo-tree-id204 . -4) (#("
	" 0 1 (fontified nil) 1 2 (fontified nil)) . 69) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (32 . 36) (#("	" 0 1 (fontified nil)) . 32) (#("
" 0 1 (fontified nil)) . 68) (undo-tree-id207 . 1) (undo-tree-id208 . 1) (67 . 68) (#("	" 0 1 (fontified nil)) . 68) (#("	    up" 0 1 (fontified nil) 1 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil)) . 67) (undo-tree-id209 . -5) (undo-tree-id210 . -5) (72 . 74) (#("public E elme" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 4 (face font-lock-keyword-face fontified nil) 4 5 (face font-lock-keyword-face fontified nil) 5 6 (face font-lock-keyword-face fontified nil) 6 7 (fontified nil) 7 8 (face font-lock-type-face fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil) 11 12 (face font-lock-variable-name-face fontified nil) 12 13 (face font-lock-variable-name-face fontified nil)) . 72) (undo-tree-id211 . -10) (undo-tree-id212 . -10) (undo-tree-id213 . 5) (83 . 85) (#("emento;" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil)) . 83) (68 . 72) (#("	" 0 1 (fontified nil)) . 68) (69 . 75) (#("        " 0 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil)) . 68) (74 . 77) (62 . 75)) nil (25221 54743 36433 948000) 0 nil])
([nil nil ((#("E> {
	       " 0 1 (face font-lock-type-face fontified nil) 1 2 (face (rainbow-delimiters-depth-2-face) fontified nil) 2 3 (fontified nil) 3 4 (face (rainbow-delimiters-depth-2-face) fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 12 (fontified nil) 12 13 (fontified nil)) . 62) (#("  	" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 74) (68 . 76) (#("public" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 4 (face font-lock-keyword-face fontified nil) 4 5 (face font-lock-keyword-face fontified nil) 5 6 (face font-lock-keyword-face fontified nil)) . 69) (68 . 69) (#("    " 0 4 (fontified nil)) . 68) (83 . 90) (#("me" 0 1 (face font-lock-variable-name-face fontified nil) 1 2 (face font-lock-variable-name-face fontified nil)) . 83) (72 . 85) (#("up" 0 1 (fontified nil) 1 2 (fontified nil)) . 72) (67 . 74) (68 . 69) (#("	" 0 1 (fontified nil)) . 67) (68 . 69) (32 . 33) (#("    " 0 4 (fontified nil)) . 32) (69 . 71) (61 . 70) (#("Odo" 0 1 (face font-lock-type-face fontified nil) 1 2 (fontified nil) 2 3 (face font-lock-type-face fontified nil)) . 61) (46 . 64) (#("class" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (face font-lock-keyword-face fontified nil) 4 5 (face font-lock-keyword-face fontified nil)) . 46) (36 . 51) (37 . 41) (32 . 36) (32 . 34) (#("}" 0 1 (face (rainbow-delimiters-unmatched-face) fontified nil)) . 33) (#("
@Override
protected Object clone() throws CloneNotSupportedException {
    // TODO Auto-generated method stub
    return super.clone();" 0 1 (fontified nil) 1 2 (fontified nil) 2 10 (face c-annotation-face fontified nil) 10 11 (fontified nil) 11 19 (face font-lock-keyword-face fontified nil) 19 20 (face font-lock-keyword-face fontified nil) 20 21 (fontified nil) 21 26 (face font-lock-type-face fontified nil) 26 27 (face font-lock-type-face fontified nil) 27 28 (fontified nil) 28 33 (face font-lock-function-name-face fontified nil) 33 34 (face (rainbow-delimiters-depth-2-face) fontified nil) 34 35 (face (rainbow-delimiters-depth-2-face) fontified nil) 35 36 (fontified nil) 36 42 (face font-lock-keyword-face fontified nil) 42 43 (fontified nil) 43 69 (face font-lock-type-face fontified nil) 69 70 (fontified nil) 70 71 (face (rainbow-delimiters-depth-2-face) fontified nil) 71 72 (fontified nil) 72 76 (c-is-sws t c-in-sws t fontified nil) 76 77 (c-in-sws t c-is-sws t face font-lock-comment-delimiter-face fontified nil) 77 79 (c-in-sws t face font-lock-comment-delimiter-face fontified nil) 79 84 (c-in-sws t face font-lock-comment-face fontified nil) 84 89 (c-in-sws t face font-lock-comment-face fontified nil) 89 99 (c-in-sws t face font-lock-comment-face fontified nil) 99 106 (c-in-sws t face font-lock-comment-face fontified nil) 106 110 (c-in-sws t face font-lock-comment-face fontified nil) 110 111 (c-in-sws t face font-lock-comment-face fontified nil) 111 112 (c-in-sws t c-is-sws t fontified nil) 112 115 (c-in-sws t c-is-sws t fontified nil) 115 116 (c-is-sws t face font-lock-keyword-face fontified nil) 116 121 (face font-lock-keyword-face fontified nil) 121 122 (fontified nil) 122 127 (face font-lock-keyword-face fontified nil) 127 128 (fontified nil) 128 133 (fontified nil) 133 134 (face (rainbow-delimiters-depth-3-face) fontified nil) 134 135 (face (rainbow-delimiters-depth-3-face) fontified nil) 135 136 (fontified nil)) . 31) (142 . 146) (#("	" 0 1 (c-in-sws t c-is-sws t fontified nil)) . 142) (103 . 107) (#("	" 0 1 (fontified nil)) . 103) (32 . 163) (#("clone() : Object" 0 16 (fontified nil)) . 32) (32 . 48) (#("    " 0 4 (fontified nil)) . 32) (12 . 37) (#(" " 0 1 (fontified nil)) . 12) (6 . 13) (t 25221 54503 706766 280000)) nil (25221 54743 36314 656000) 0 nil])
([nil nil ((#("c clas " 0 1 (face font-lock-keyword-face fontified nil) 1 2 (fontified nil) 2 5 (face font-lock-keyword-face fontified nil) 5 6 (face font-lock-keyword-face fontified nil) 6 7 (fontified nil)) . 6) (undo-tree-id116 . -6) (undo-tree-id117 . -7) (undo-tree-id118 . -6) (12 . 13) (#("s ArbolBinario<T> " 0 1 (c-type c-decl-type-start face font-lock-keyword-face fontified nil) 1 2 (fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (face font-lock-type-face fontified nil) 4 5 (face font-lock-type-face fontified nil) 5 6 (face font-lock-type-face fontified nil) 6 7 (face font-lock-type-face fontified nil) 7 8 (face font-lock-type-face fontified nil) 8 9 (face font-lock-type-face fontified nil) 9 10 (face font-lock-type-face fontified nil) 10 11 (face font-lock-type-face fontified nil) 11 12 (face font-lock-type-face fontified nil) 12 13 (face font-lock-type-face fontified nil) 13 14 (face font-lock-type-face fontified nil) 14 15 (face (rainbow-delimiters-depth-1-face) category c-<-as-paren-syntax fontified nil) 15 16 (face font-lock-type-face fontified nil) 16 17 (face (rainbow-delimiters-depth-1-face) category c->-as-paren-syntax fontified nil) 17 18 (fontified nil)) . 12) (undo-tree-id119 . -18) (undo-tree-id120 . -18) (undo-tree-id121 . -18) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 30) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#("
    " 0 1 (fontified nil) 1 5 (fontified nil)) . 31) (undo-tree-id125 . -1) (undo-tree-id126 . -5) (undo-tree-id127 . -1) (#("}" 0 1 (face (rainbow-delimiters-unmatched-face) fontified nil)) . 36) (undo-tree-id128 . 1) (undo-tree-id129 . 1) (32 . 36) (#("clone() : Object" 0 16 (fontified nil)) . 32) (32 . 48) (#("@Override
protected Object clone() throws CloneNotSupportedException {
	// TODO Auto-generated method stub
	return super.clone();
}" 0 1 (fontified nil) 1 9 (face c-annotation-face fontified nil) 9 10 (fontified nil) 10 18 (face font-lock-keyword-face fontified nil) 18 19 (face font-lock-keyword-face fontified nil) 19 20 (fontified nil) 20 25 (face font-lock-type-face fontified nil) 25 26 (face font-lock-type-face fontified nil) 26 27 (fontified nil) 27 32 (face font-lock-function-name-face fontified nil) 32 33 (face (rainbow-delimiters-depth-2-face) fontified nil) 33 34 (face (rainbow-delimiters-depth-2-face) fontified nil) 34 35 (fontified nil) 35 41 (face font-lock-keyword-face fontified nil) 41 42 (fontified nil) 42 68 (face font-lock-type-face fontified nil) 68 69 (fontified nil) 69 70 (face (rainbow-delimiters-depth-2-face) fontified nil) 70 71 (fontified nil) 71 72 (fontified nil) 72 73 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified nil) 73 75 (c-in-sws t face font-lock-comment-delimiter-face fontified nil) 75 80 (c-in-sws t face font-lock-comment-face fontified nil) 80 85 (c-in-sws t face font-lock-comment-face fontified nil) 85 95 (c-in-sws t face font-lock-comment-face fontified nil) 95 102 (c-in-sws t face font-lock-comment-face fontified nil) 102 106 (c-in-sws t face font-lock-comment-face fontified nil) 106 107 (c-in-sws t face font-lock-comment-face fontified nil) 107 108 (c-in-sws t c-is-sws t fontified nil) 108 109 (c-is-sws t face font-lock-keyword-face fontified nil) 109 114 (face font-lock-keyword-face fontified nil) 114 115 (fontified nil) 115 120 (face font-lock-keyword-face fontified nil) 120 121 (fontified nil) 121 126 (fontified nil) 126 127 (face (rainbow-delimiters-depth-3-face) fontified nil) 127 128 (face (rainbow-delimiters-depth-3-face) fontified nil) 128 129 (fontified nil) 129 130 (fontified nil) 130 131 (face (rainbow-delimiters-unmatched-face) fontified nil)) . 32) (undo-tree-id130 . -130) (undo-tree-id131 . -130) (undo-tree-id132 . 1) (undo-tree-id133 . -130) (undo-tree-id134 . 1) (103 . 104) (#("    " 0 4 (c-is-sws t c-in-sws t fontified nil)) . 103) (142 . 143) (#("    " 0 1 (c-in-sws t c-is-sws t fontified nil) 1 4 (c-in-sws t c-is-sws t fontified nil)) . 142) (31 . 167) (33 . 34) (#("

" 0 1 (fontified nil) 1 2 (fontified nil)) . 32) (undo-tree-id135 . 2) (undo-tree-id136 . 2) (#("    " 0 4 (fontified nil)) . 32) (undo-tree-id137 . -4) (undo-tree-id138 . -4) (undo-tree-id139 . -4) (#("    " 0 4 (fontified t)) . 37) (#("p" 0 1 (face font-lock-keyword-face fontified nil)) . 36) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#("rotected class" 0 1 (face font-lock-keyword-face fontified nil) 1 3 (face font-lock-keyword-face fontified nil) 3 4 (face font-lock-keyword-face fontified nil) 4 5 (face font-lock-keyword-face fontified nil) 5 6 (face font-lock-keyword-face fontified nil) 6 7 (face font-lock-keyword-face fontified nil) 7 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 10 (face font-lock-keyword-face fontified nil) 10 11 (face font-lock-keyword-face fontified nil) 11 12 (face font-lock-keyword-face fontified nil) 12 13 (face font-lock-keyword-face fontified nil) 13 14 (face font-lock-keyword-face fontified nil)) . 37) (undo-tree-id143 . -9) (undo-tree-id144 . -14) (undo-tree-id145 . -9) (46 . 51) (#("private class NOdo" 0 1 (face font-lock-keyword-face fontified nil) 1 3 (face font-lock-keyword-face fontified nil) 3 4 (face font-lock-keyword-face fontified nil) 4 5 (face font-lock-keyword-face fontified nil) 5 6 (face font-lock-keyword-face fontified nil) 6 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil) 8 9 (face font-lock-keyword-face fontified nil) 9 10 (face font-lock-keyword-face fontified nil) 10 11 (face font-lock-keyword-face fontified nil) 11 12 (face font-lock-keyword-face fontified nil) 12 13 (c-type c-decl-type-start face font-lock-keyword-face fontified nil) 13 14 (fontified nil) 14 15 (face font-lock-type-face fontified nil) 15 16 (face font-lock-type-face fontified nil) 16 17 (fontified nil) 17 18 (face font-lock-type-face fontified nil)) . 46) (undo-tree-id146 . -15) (undo-tree-id147 . -18) (undo-tree-id148 . -15) (61 . 64) (#("odo<" 0 1 (face font-lock-type-face fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (fontified nil)) . 61) (undo-tree-id149 . -4) (undo-tree-id150 . -3) (undo-tree-id151 . -4) (#("E> " 0 1 (face font-lock-type-face fontified nil) 1 2 (face (rainbow-delimiters-depth-2-face) fontified nil) 2 3 (fontified nil)) . 65) (undo-tree-id152 . -3) (undo-tree-id153 . -3) (#("{}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 68) (undo-tree-id154 . -1) (undo-tree-id155 . 1) (undo-tree-id156 . -1) (undo-tree-id157 . 1) (#("
	" 0 1 (fontified nil) 1 2 (fontified nil)) . 69) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (32 . 36) (#("	" 0 1 (fontified nil)) . 32) (#("
" 0 1 (fontified nil)) . 68) (undo-tree-id160 . 1) (undo-tree-id161 . 1) (67 . 68) (#("	" 0 1 (fontified nil)) . 68) (#("	    " 0 1 (fontified nil) 1 5 (fontified nil)) . 67) (undo-tree-id162 . -5) (undo-tree-id163 . -5) (#("up" 0 1 (fontified nil) 1 2 (fontified nil)) . 72) (72 . 74) (#("public E" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 4 (face font-lock-keyword-face fontified nil) 4 5 (face font-lock-keyword-face fontified nil) 5 6 (face font-lock-keyword-face fontified nil) 6 7 (fontified nil) 7 8 (face font-lock-type-face fontified nil)) . 72) (undo-tree-id164 . -8) (undo-tree-id165 . -8) (undo-tree-id166 . 1) (#(" " 0 1 (fontified nil)) . 80) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (#("elme" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (face font-lock-variable-name-face fontified nil) 3 4 (face font-lock-variable-name-face fontified nil)) . 81) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (83 . 85) (#("emento" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil)) . 83) (#(";" 0 1 (fontified nil)) . 89) (68 . 72) (#("	" 0 1 (fontified nil)) . 68) (69 . 75) (#("        " 0 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil)) . 68) (74 . 77) (62 . 75) 61) nil (25221 54743 36275 998000) 0 nil])
([nil nil ((#("E> {
	       " 0 1 (face font-lock-type-face fontified nil) 1 2 (face (rainbow-delimiters-depth-2-face) fontified nil) 2 3 (fontified nil) 3 4 (face (rainbow-delimiters-depth-2-face) fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 12 (fontified nil) 12 13 (fontified nil)) . 62) (#("  	" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 74) (68 . 76) (#("public" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 4 (face font-lock-keyword-face fontified nil) 4 5 (face font-lock-keyword-face fontified nil) 5 6 (face font-lock-keyword-face fontified nil)) . 69) (68 . 69) (#("    " 0 4 (fontified nil)) . 68) (83 . 90) (#("me" 0 1 (face font-lock-variable-name-face fontified nil) 1 2 (face font-lock-variable-name-face fontified nil)) . 83) (72 . 85) (#("up" 0 1 (fontified nil) 1 2 (fontified nil)) . 72) (67 . 74) (68 . 69) (#("	" 0 1 (fontified nil)) . 67) (68 . 69) (32 . 33) (#("    " 0 4 (fontified nil)) . 32) (69 . 71) (61 . 70) (#("Odo" 0 1 (face font-lock-type-face fontified nil) 1 2 (fontified nil) 2 3 (face font-lock-type-face fontified nil)) . 61) (46 . 64) (#("class" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 3 (face font-lock-keyword-face fontified nil) 3 4 (face font-lock-keyword-face fontified nil) 4 5 (face font-lock-keyword-face fontified nil)) . 46) (36 . 51) (37 . 41) (32 . 36) (32 . 34) (#("}" 0 1 (face (rainbow-delimiters-unmatched-face) fontified nil)) . 33) (#("
@Override
protected Object clone() throws CloneNotSupportedException {
    // TODO Auto-generated method stub
    return super.clone();" 0 1 (fontified nil) 1 2 (fontified nil) 2 10 (face c-annotation-face fontified nil) 10 11 (fontified nil) 11 19 (face font-lock-keyword-face fontified nil) 19 20 (face font-lock-keyword-face fontified nil) 20 21 (fontified nil) 21 26 (face font-lock-type-face fontified nil) 26 27 (face font-lock-type-face fontified nil) 27 28 (fontified nil) 28 33 (face font-lock-function-name-face fontified nil) 33 34 (face (rainbow-delimiters-depth-2-face) fontified nil) 34 35 (face (rainbow-delimiters-depth-2-face) fontified nil) 35 36 (fontified nil) 36 42 (face font-lock-keyword-face fontified nil) 42 43 (fontified nil) 43 69 (face font-lock-type-face fontified nil) 69 70 (fontified nil) 70 71 (face (rainbow-delimiters-depth-2-face) fontified nil) 71 72 (fontified nil) 72 76 (c-is-sws t c-in-sws t fontified nil) 76 77 (c-in-sws t c-is-sws t face font-lock-comment-delimiter-face fontified nil) 77 79 (c-in-sws t face font-lock-comment-delimiter-face fontified nil) 79 84 (c-in-sws t face font-lock-comment-face fontified nil) 84 89 (c-in-sws t face font-lock-comment-face fontified nil) 89 99 (c-in-sws t face font-lock-comment-face fontified nil) 99 106 (c-in-sws t face font-lock-comment-face fontified nil) 106 110 (c-in-sws t face font-lock-comment-face fontified nil) 110 111 (c-in-sws t face font-lock-comment-face fontified nil) 111 112 (c-in-sws t c-is-sws t fontified nil) 112 115 (c-in-sws t c-is-sws t fontified nil) 115 116 (c-is-sws t face font-lock-keyword-face fontified nil) 116 121 (face font-lock-keyword-face fontified nil) 121 122 (fontified nil) 122 127 (face font-lock-keyword-face fontified nil) 127 128 (fontified nil) 128 133 (fontified nil) 133 134 (face (rainbow-delimiters-depth-3-face) fontified nil) 134 135 (face (rainbow-delimiters-depth-3-face) fontified nil) 135 136 (fontified nil)) . 31) (142 . 146) (#("	" 0 1 (c-in-sws t c-is-sws t fontified nil)) . 142) (103 . 107) (#("	" 0 1 (fontified nil)) . 103) (32 . 163) (#("clone() : Object" 0 16 (fontified nil)) . 32) (32 . 48) (#("    " 0 4 (fontified nil)) . 32) (12 . 37) (#(" " 0 1 (fontified nil)) . 12) (6 . 13) (t 25221 54503 706766 280000)) nil (25221 54743 36136 378000) 0 nil])
([nil nil ((182 . 187) (#("		" 0 1 (c-in-sws t c-is-sws t fontified nil) 1 2 (c-is-sws t c-in-sws t fontified nil)) . 182) (142 . 147) (#("		" 0 2 (fontified nil)) . 142) (70 . 205) (#("E" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified nil)) . 70) (undo-tree-id115 . 1) (#("clone() : Object" 0 16 (fontified nil)) . -70) (70 . 86) (71 . 72) (70 . 71) (69 . 70) (#(" " 0 1 (fontified nil)) . 69) (68 . 69) (32 . 36) (#("	" 0 1 (fontified nil)) . 32) (64 . 65) (63 . 64)) nil (25221 54743 36111 292000) 0 nil])
([nil nil ((#(">" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 63) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 64) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (32 . 33) (#("    " 0 4 (fontified nil)) . 32) (#("
" 0 1 (fontified t)) . 68) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (69 . 70) (#("	" 0 1 (fontified nil)) . 69) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (#("E" 0 1 (face font-lock-type-face fontified nil)) . 70) (undo-tree-id99 . 1) (undo-tree-id100 . 1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (#(" " 0 1 (fontified nil)) . 71) (undo-tree-id103 . 1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#("clone() : Object" 0 16 (fontified nil)) . 70) (undo-tree-id106 . 16) (undo-tree-id107 . 16) (70 . 86) (70 . 71) (#("@Override
	protected Object clone() throws CloneNotSupportedException {
		// TODO Auto-generated method stub
		return super.clone();
	}" 0 9 (face c-annotation-face fontified t) 9 11 (fontified t) 11 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 26 (face font-lock-type-face fontified t) 26 27 (face font-lock-type-face c-type c-decl-id-start fontified t) 27 28 (fontified t) 28 33 (face font-lock-function-name-face fontified t) 33 34 (face (rainbow-delimiters-depth-3-face) fontified t) 34 35 (face (rainbow-delimiters-depth-3-face) fontified t) 35 36 (fontified t) 36 42 (face font-lock-keyword-face fontified t) 42 43 (fontified t) 43 69 (face font-lock-type-face fontified t) 69 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-3-face) fontified t) 71 72 (fontified t) 72 74 (fontified nil) 74 75 (face font-lock-comment-delimiter-face c-in-sws t c-is-sws t fontified nil) 75 77 (face font-lock-comment-delimiter-face c-in-sws t fontified nil) 77 109 (face font-lock-comment-face c-in-sws t fontified nil) 109 110 (c-in-sws t c-is-sws t fontified nil) 110 111 (c-in-sws t c-is-sws t fontified nil) 111 112 (face font-lock-keyword-face c-is-sws t fontified nil) 112 117 (face font-lock-keyword-face fontified nil) 117 118 (fontified nil) 118 123 (face font-lock-keyword-face fontified nil) 123 129 (fontified nil) 129 130 (face (rainbow-delimiters-depth-4-face) fontified nil) 130 131 (face (rainbow-delimiters-depth-4-face) fontified nil) 131 133 (fontified nil) 133 134 (fontified t) 134 135 (face (rainbow-delimiters-depth-3-face) fontified t)) . 70) (undo-tree-id108 . -134) (undo-tree-id109 . 1) (undo-tree-id110 . -135) (undo-tree-id111 . 65) (undo-tree-id112 . -71) (undo-tree-id113 . -77) (undo-tree-id114 . -108) (142 . 144) (#("	    " 0 5 (c-is-sws t c-in-sws t fontified t)) . 142) (182 . 184) (#("	    " 0 1 (c-in-sws t c-is-sws t fontified t) 1 5 (c-in-sws t c-is-sws t fontified t)) . 182)) nil (25221 54743 36089 279000) 0 nil])
([nil nil ((#("private " 0 1 (face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 4 (face font-lock-keyword-face fontified t) 4 5 (face font-lock-keyword-face fontified t) 5 6 (face font-lock-keyword-face fontified t) 6 7 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 7 8 (fontified t)) . -75) (undo-tree-id26 . -8) (undo-tree-id27 . -8) (undo-tree-id28 . -8) 83 (#("E " 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t) 1 2 (fontified t)) . -83) (undo-tree-id29 . -2) (undo-tree-id30 . -2) (undo-tree-id31 . -2) 85 (#("dato;
	@" 0 1 (face font-lock-variable-name-face fontified t) 1 2 (face font-lock-variable-name-face fontified t) 2 3 (face font-lock-variable-name-face fontified t) 3 4 (face font-lock-variable-name-face fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . -85) (undo-tree-id32 . -7) (undo-tree-id33 . -8) (undo-tree-id34 . -1) (undo-tree-id35 . 4) 93 (#("Override
	" 0 8 (face c-annotation-face fontified t) 8 10 (fontified t)) . -93) (undo-tree-id36 . -10) 103 (#("protected " 0 8 (face font-lock-keyword-face fontified t) 8 9 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 9 10 (fontified t)) . -103) (undo-tree-id37 . -10) 113 (#("Object " 0 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face c-type c-decl-id-start fontified t) 6 7 (fontified t)) . -113) (undo-tree-id38 . -7) 120 (#("clone() " 0 5 (face font-lock-function-name-face fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (fontified t)) . -120) (undo-tree-id39 . -8) 128 (#("throws " 0 6 (face font-lock-keyword-face fontified nil) 6 7 (fontified nil)) . -128) (undo-tree-id40 . -7) 135 (#("CloneNotSupportedException {
	    // " 0 26 (face font-lock-type-face fontified t) 26 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-3-face) fontified t) 28 29 (fontified t) 29 34 (c-is-sws t c-in-sws t fontified nil) 34 35 (face font-lock-comment-delimiter-face c-in-sws t c-is-sws t fontified nil) 35 37 (face font-lock-comment-delimiter-face c-in-sws t fontified nil)) . -135) (undo-tree-id41 . -37) 172 (#("TODO " 0 5 (face font-lock-comment-face c-in-sws t fontified nil)) . -172) (undo-tree-id42 . -5) 177 (#("Auto-" 0 5 (face font-lock-comment-face c-in-sws t fontified nil)) . -177) (undo-tree-id43 . -5) 182 (#("generated " 0 10 (face font-lock-comment-face c-in-sws t fontified t)) . -182) (undo-tree-id44 . -10) 192 (#("method " 0 7 (face font-lock-comment-face c-in-sws t fontified t)) . -192) (undo-tree-id45 . -7) 199 (#("stub
	    " 0 4 (face font-lock-comment-face c-in-sws t fontified t) 4 5 (c-in-sws t face font-lock-comment-face fontified t) 5 6 (c-in-sws t c-is-sws t fontified t) 6 10 (c-in-sws t c-is-sws t fontified t)) . -199) (undo-tree-id46 . -10) 209 (#("return " 0 1 (face font-lock-keyword-face c-is-sws t fontified t) 1 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t)) . -209) (undo-tree-id47 . -7) 216 (#("super." 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . -216) (undo-tree-id48 . -6) 222 (#("clone();
	}" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t)) . -222) (undo-tree-id49 . -11) (undo-tree-id50 . 1) (undo-tree-id51 . -11) 233 (231 . 232) (204 . 209) (#("	" 0 1 (c-in-sws t c-is-sws t fontified nil)) . 204) (164 . 169) (#("	" 0 1 (fontified nil)) . 164) (102 . 103) (92 . 223) (#("clone() : Object" 0 16 (fontified nil)) . -92) (92 . 108) (#("@" 0 1 (fontified t)) . -92) (undo-tree-id52 . -1) 93 (#("Override
	" 0 8 (face c-annotation-face fontified t) 8 10 (fontified t)) . -93) (undo-tree-id53 . -10) 103 (#("protected " 0 8 (face font-lock-keyword-face fontified t) 8 9 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 9 10 (fontified t)) . -103) (undo-tree-id54 . -10) 113 (#("Object " 0 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face c-type c-decl-id-start fontified t) 6 7 (fontified t)) . -113) (undo-tree-id55 . -7) 120 (#("clone() " 0 5 (face font-lock-function-name-face fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (fontified t)) . -120) (undo-tree-id56 . -8) 128 (#("throws " 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t)) . -128) (undo-tree-id57 . -7) 135 (#("CloneNotSupportedException {
	    // " 0 26 (face font-lock-type-face fontified t) 26 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-3-face) fontified t) 28 29 (fontified t) 29 34 (c-is-sws t c-in-sws t fontified t) 34 35 (face font-lock-comment-delimiter-face c-in-sws t c-is-sws t fontified t) 35 37 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . -135) (undo-tree-id58 . -37) 172 (#("TODO " 0 5 (face font-lock-comment-face c-in-sws t fontified t)) . -172) (undo-tree-id59 . -5) 177 (#("Auto-" 0 5 (face font-lock-comment-face c-in-sws t fontified t)) . -177) (undo-tree-id60 . -5) 182 (#("generated " 0 10 (face font-lock-comment-face c-in-sws t fontified t)) . -182) (undo-tree-id61 . -10) 192 (#("method " 0 7 (face font-lock-comment-face c-in-sws t fontified t)) . -192) (undo-tree-id62 . -7) 199 (#("stub
	    " 0 4 (face font-lock-comment-face c-in-sws t fontified t) 4 5 (c-in-sws t face font-lock-comment-face fontified t) 5 6 (c-in-sws t c-is-sws t fontified t) 6 10 (c-in-sws t c-is-sws t fontified t)) . -199) (undo-tree-id63 . -10) 209 (#("return " 0 1 (face font-lock-keyword-face c-is-sws t fontified t) 1 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t)) . -209) (undo-tree-id64 . -7) 216 (#("super." 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . -216) (undo-tree-id65 . -6) 222 (#("clone();
	}" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t)) . -222) (undo-tree-id66 . -11) (undo-tree-id67 . 1) (undo-tree-id68 . -11) 233 (231 . 232) (204 . 209) (#("	" 0 1 (c-in-sws t c-is-sws t fontified nil)) . 204) (164 . 169) (#("	" 0 1 (fontified nil)) . 164) (102 . 103) (92 . 223) (#("clone() : Object" 0 16 (fontified nil)) . -92) (92 . 108) (#("p" 0 1 (fontified t)) . -92) (undo-tree-id69 . -1) (undo-tree-id70 . -1) 93 (92 . 93) (90 . 92) (75 . 83) (77 . 81) (#("elemento" 0 1 (face font-lock-variable-name-face fontified t) 1 2 (face font-lock-variable-name-face fontified t) 2 3 (face font-lock-variable-name-face fontified t) 3 4 (face font-lock-variable-name-face fontified t) 4 5 (face font-lock-variable-name-face fontified t) 5 6 (face font-lock-variable-name-face fontified t) 6 7 (face font-lock-variable-name-face fontified t) 7 8 (face font-lock-variable-name-face fontified t)) . -77) (undo-tree-id71 . -8) (undo-tree-id72 . -1) (undo-tree-id73 . 8) 85 (75 . 77) (67 . 68) (32 . 36) (#("	" 0 1 (fontified nil)) . 32) (64 . 65) (65 . 70) (#(" " 0 1 (fontified nil)) . 64) (undo-tree-id74 . -1) (65 . 66) (63 . 64)) nil (25221 54743 35580 941000) 0 nil])
([nil nil ((#(">" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 63) (#("
" 0 1 (fontified nil)) . 65) (undo-tree-id21 . -1) (64 . 65) (#("	    " 0 5 (fontified nil)) . 65) (undo-tree-id22 . -4) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 64) (32 . 33) (#("    " 0 4 (fontified nil)) . 32) (#(" " 0 1 (fontified t)) . 67) (#("E " 0 1 (face font-lock-type-face fontified nil) 1 2 (fontified nil)) . 75) (77 . 85) (#("dato" 0 1 (face font-lock-variable-name-face fontified nil) 1 2 (face font-lock-variable-name-face fontified nil) 2 3 (face font-lock-variable-name-face fontified nil) 3 4 (face font-lock-variable-name-face fontified nil)) . 77) (undo-tree-id23 . -1) (#("private " 0 1 (face font-lock-keyword-face fontified nil) 1 2 (face font-lock-keyword-face fontified nil) 2 4 (face font-lock-keyword-face fontified nil) 4 5 (face font-lock-keyword-face fontified nil) 5 6 (face font-lock-keyword-face fontified nil) 6 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil)) . 75) (#("
	" 0 1 (fontified nil) 1 2 (fontified nil)) . 90) (undo-tree-id24 . -2) (#("p" 0 1 (fontified nil)) . 92) (undo-tree-id25 . -1) (92 . 93) (#("clone() : Object" 0 16 (fontified nil)) . 92) (92 . 108) (#("@Override
protected Object clone() throws CloneNotSupportedException {
	// TODO Auto-generated method stub
	return super.clone();
}" 0 1 (fontified nil) 1 9 (face c-annotation-face fontified nil) 9 10 (fontified nil) 10 18 (face font-lock-keyword-face fontified nil) 18 19 (face font-lock-keyword-face fontified nil) 19 20 (fontified nil) 20 25 (face font-lock-type-face fontified nil) 25 26 (face font-lock-type-face fontified nil) 26 27 (fontified nil) 27 32 (face font-lock-function-name-face fontified nil) 32 33 (face (rainbow-delimiters-depth-3-face) fontified nil) 33 34 (face (rainbow-delimiters-depth-3-face) fontified nil) 34 35 (fontified nil) 35 41 (face font-lock-keyword-face fontified nil) 41 42 (fontified nil) 42 68 (face font-lock-type-face fontified nil) 68 69 (fontified nil) 69 70 (face (rainbow-delimiters-depth-3-face) fontified nil) 70 71 (fontified nil) 71 72 (fontified nil) 72 73 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified nil) 73 75 (c-in-sws t face font-lock-comment-delimiter-face fontified nil) 75 80 (c-in-sws t face font-lock-comment-face fontified nil) 80 85 (c-in-sws t face font-lock-comment-face fontified nil) 85 95 (c-in-sws t face font-lock-comment-face fontified nil) 95 102 (c-in-sws t face font-lock-comment-face fontified nil) 102 106 (c-in-sws t face font-lock-comment-face fontified nil) 106 107 (c-in-sws t face font-lock-comment-face fontified nil) 107 108 (c-in-sws t c-is-sws t fontified nil) 108 109 (c-is-sws t face font-lock-keyword-face fontified nil) 109 114 (face font-lock-keyword-face fontified nil) 114 115 (fontified nil) 115 120 (face font-lock-keyword-face fontified nil) 120 121 (fontified nil) 121 126 (fontified nil) 126 127 (face (rainbow-delimiters-depth-4-face) fontified nil) 127 128 (face (rainbow-delimiters-depth-4-face) fontified nil) 128 130 (fontified nil) 130 131 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 92) (#("	" 0 1 (fontified nil)) . 102) (164 . 165) (#("	    " 0 5 (c-is-sws t c-in-sws t fontified nil)) . 164) (204 . 205) (#("	    " 0 1 (c-in-sws t c-is-sws t fontified nil) 1 5 (c-in-sws t c-is-sws t fontified nil)) . 204) (#("	" 0 1 (fontified nil)) . 231) (92 . 233) (#("clone() : Object" 0 16 (fontified nil)) . 92) (92 . 108) (#("@Override
protected Object clone() throws CloneNotSupportedException {
	// TODO Auto-generated method stub
	return super.clone();
}" 0 1 (fontified nil) 1 9 (face c-annotation-face fontified nil) 9 10 (fontified nil) 10 18 (face font-lock-keyword-face fontified nil) 18 19 (face font-lock-keyword-face fontified nil) 19 20 (fontified nil) 20 25 (face font-lock-type-face fontified nil) 25 26 (face font-lock-type-face fontified nil) 26 27 (fontified nil) 27 32 (face font-lock-function-name-face fontified nil) 32 33 (face (rainbow-delimiters-depth-3-face) fontified nil) 33 34 (face (rainbow-delimiters-depth-3-face) fontified nil) 34 35 (fontified nil) 35 41 (face font-lock-keyword-face fontified nil) 41 42 (fontified nil) 42 68 (face font-lock-type-face fontified nil) 68 69 (fontified nil) 69 70 (face (rainbow-delimiters-depth-3-face) fontified nil) 70 71 (fontified nil) 71 72 (fontified nil) 72 73 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified nil) 73 75 (c-in-sws t face font-lock-comment-delimiter-face fontified nil) 75 80 (c-in-sws t face font-lock-comment-face fontified nil) 80 85 (c-in-sws t face font-lock-comment-face fontified nil) 85 95 (c-in-sws t face font-lock-comment-face fontified nil) 95 102 (c-in-sws t face font-lock-comment-face fontified nil) 102 106 (c-in-sws t face font-lock-comment-face fontified nil) 106 107 (c-in-sws t face font-lock-comment-face fontified nil) 107 108 (c-in-sws t c-is-sws t fontified nil) 108 109 (c-is-sws t face font-lock-keyword-face fontified nil) 109 114 (face font-lock-keyword-face fontified nil) 114 115 (fontified nil) 115 120 (face font-lock-keyword-face fontified nil) 120 121 (fontified nil) 121 126 (fontified nil) 126 127 (face (rainbow-delimiters-depth-4-face) fontified nil) 127 128 (face (rainbow-delimiters-depth-4-face) fontified nil) 128 130 (fontified nil) 130 131 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 92) (#("	" 0 1 (fontified nil)) . 102) (164 . 165) (#("	    " 0 5 (c-is-sws t c-in-sws t fontified nil)) . 164) (204 . 205) (#("	    " 0 1 (c-in-sws t c-is-sws t fontified nil) 1 5 (c-in-sws t c-is-sws t fontified nil)) . 204) (#("	" 0 1 (fontified nil)) . 231) (75 . 233)) nil (25221 54743 35434 158000) 0 nil])
([nil nil ((69 . 71) (32 . 36) (#("	" 0 1 (fontified nil)) . 32) (65 . 66) (63 . 64)) nil (25221 54743 35403 2000) 0 nil])
([nil nil ((95 . 100) (#("a" 0 1 (fontified t)) . -95) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#("v" 0 1 (fontified t)) . -96) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 97 (92 . 97) (90 . 92) (77 . 79) (71 . 77) (71 . 73) (#("D" 0 1 (fontified t)) . -71) (undo-tree-id19 . -1) (#("a" 0 1 (fontified t)) . -72) (undo-tree-id20 . -1) 73 (71 . 73)) nil (25221 54743 35389 921000) 0 nil])
([nil nil ((101 . 105) (#("	" 0 1 (fontified t c-in-sws t)) . -101) (undo-tree-id420 . -1) 102 (t 25221 54743 60187 886000)) nil (25221 54779 229991 381000) 0 nil])
([nil nil ((99 . 104)) nil (25221 54779 229984 913000) 0 nil])
([nil nil ((104 . 105)) nil (25221 54779 229982 194000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -104) (undo-tree-id419 . -1) 105) nil (25221 54779 229978 377000) 0 nil])
([nil nil ((104 . 107)) nil (25221 54779 229973 93000) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-type-face fontified t)) . -105) (undo-tree-id415 . -1) (#(">" 0 1 (face (rainbow-delimiters-depth-3-face) c-type c-decl-id-start fontified t)) . -106) (undo-tree-id416 . -1) (undo-tree-id417 . 1) (undo-tree-id418 . -1) 107) nil (25221 54779 229969 39000) 0 nil])
([nil nil ((105 . 106)) nil (25221 54779 229956 795000) 0 nil])
([nil nil ((106 . 113)) nil (25221 54779 229954 38000) 0 nil])
([nil nil ((113 . 114)) nil (25221 54779 229951 493000) 0 nil])
([nil nil ((115 . 116) (#(" " 0 1 (fontified nil)) . 115) (114 . 115)) nil (25221 54779 229947 920000) 0 nil])
([nil nil ((116 . 119)) nil (25221 54779 229944 15000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -117) (undo-tree-id413 . -1) (#("r" 0 1 (fontified t)) . -118) (undo-tree-id414 . -1) 119) nil (25221 54779 229940 106000) 0 nil])
([nil nil ((117 . 121)) nil (25221 54779 229931 347000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -116) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (#("r" 0 1 (fontified t)) . -117) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (#("i" 0 1 (fontified t)) . -118) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (#("v" 0 1 (fontified t)) . -119) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (#("a" 0 1 (fontified t)) . -120) (undo-tree-id411 . -1) (undo-tree-id412 . -1) 121) nil (25221 54779 229911 316000) 0 nil])
([nil nil ((116 . 121) (t 25221 54779 242553 935000)) nil (25221 54853 1516 804000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -120) (undo-tree-id463 . -1) 121) nil (25221 54853 1512 805000) 0 nil])
([nil nil ((#("priv" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -116) (undo-tree-id462 . -4) 120) nil (25221 54853 1506 440000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -119) (undo-tree-id457 . -1) (#(" " 0 1 (fontified t)) . -120) (undo-tree-id458 . -1) (#(" " 0 1 (fontified t)) . -121) (undo-tree-id459 . -1) (#(" " 0 1 (fontified nil)) . -122) (undo-tree-id460 . -1) (#("	" 0 1 (fontified nil)) . 123) (undo-tree-id461 . -1) (115 . 123) 116) nil (25221 54853 1498 621000) 0 nil])
([nil nil ((#("padre;
    " 0 1 (face font-lock-variable-name-face fontified t) 1 2 (face font-lock-variable-name-face fontified t) 2 3 (face font-lock-variable-name-face fontified t) 3 4 (face font-lock-variable-name-face fontified t) 4 5 (face font-lock-variable-name-face fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 11 (fontified t)) . -108) (undo-tree-id456 . -11) 119) nil (25221 54853 1482 492000) 0 nil])
([nil nil ((#("E> " 0 1 (face font-lock-type-face fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) c-type c-decl-id-start fontified t) 2 3 (fontified t)) . -105) (undo-tree-id455 . -3) 108) nil (25221 54853 1476 379000) 0 nil])
([nil nil ((#("Nodo<" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified t) 4 5 (fontified t)) . -100) (undo-tree-id453 . -4) (undo-tree-id454 . -5) 105) nil (25221 54853 1470 288000) 0 nil])
([nil nil ((#("private " 0 1 (face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (face font-lock-keyword-face fontified t) 4 5 (face font-lock-keyword-face fontified t) 5 6 (face font-lock-keyword-face fontified t) 6 7 (c-type c-decl-id-start face font-lock-keyword-face fontified t) 7 8 (fontified t)) . -92) (undo-tree-id450 . -7) (undo-tree-id451 . -8) (undo-tree-id452 . -8) 100) nil (25221 54853 1461 891000) 0 nil])
([nil nil ((92 . 102)) nil (25221 54853 1452 494000) 0 nil])
([nil nil ((#("E " 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t) 1 2 (fontified t)) . -100) (undo-tree-id449 . -2) 102) nil (25221 54853 1449 228000) 0 nil])
([nil nil ((100 . 105)) nil (25221 54853 1443 308000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -104) (undo-tree-id448 . -1) 105) nil (25221 54853 1439 970000) 0 nil])
([nil nil ((104 . 105)) nil (25221 54853 1434 557000) 0 nil])
([nil nil ((#("Z" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -104) (undo-tree-id447 . -1) 105) nil (25221 54853 1431 204000) 0 nil])
([nil nil ((104 . 105)) nil (25221 54853 1425 753000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t)) . -104) (undo-tree-id446 . -1) 105) nil (25221 54853 1422 426000) 0 nil])
([nil nil ((104 . 110)) nil (25221 54853 1417 1000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -108) (undo-tree-id444 . -1) (#("z" 0 1 (face font-lock-variable-name-face fontified t)) . -109) (undo-tree-id445 . -1) 110) nil (25221 54853 1412 979000) 0 nil])
([nil nil ((108 . 113)) nil (25221 54853 1405 39000) 0 nil])
([nil nil ((113 . 114)) nil (25221 54853 1402 399000) 0 nil])
([nil nil ((114 . 116)) nil (25221 54853 1399 768000) 0 nil])
([nil nil ((116 . 130)) nil (25221 54853 1397 85000) 0 nil])
([nil nil ((#(">" 0 1 (face (rainbow-delimiters-depth-3-face) c-type c-decl-id-start fontified t)) . -129) (undo-tree-id441 . -1) (undo-tree-id442 . 1) (undo-tree-id443 . -1) 130) nil (25221 54853 1393 307000) 0 nil])
([nil nil ((129 . 141)) nil (25221 54853 1379 568000) 0 nil])
([nil nil ((141 . 142)) nil (25221 54853 1377 183000) 0 nil])
([nil nil ((142 . 144)) nil (25221 54853 1374 680000) 0 nil])
([nil nil ((144 . 147)) nil (25221 54853 1372 4000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -145) (undo-tree-id439 . -1) (#("r" 0 1 (fontified t)) . -146) (undo-tree-id440 . -1) 147) nil (25221 54853 1367 916000) 0 nil])
([nil nil ((145 . 156)) nil (25221 54853 1359 255000) 0 nil])
([nil nil ((#("O" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -153) (undo-tree-id436 . -1) (#("d" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -154) (undo-tree-id437 . -1) (#("o" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -155) (undo-tree-id438 . -1) 156) nil (25221 54853 1343 592000) 0 nil])
([nil nil ((153 . 157)) nil (25221 54853 1333 300000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t)) . -156) (undo-tree-id435 . -1) 157) nil (25221 54853 1330 156000) 0 nil])
([nil nil ((156 . 167)) nil (25221 54853 1324 872000) 0 nil])
([nil nil ((167 . 168)) nil (25221 54853 1321 939000) 0 nil])
([nil nil ((168 . 170)) nil (25221 54853 1319 200000) 0 nil])
([nil nil ((170 . 177)) nil (25221 54853 1316 552000) 0 nil])
([nil nil ((#("private" 0 1 (face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (face font-lock-keyword-face fontified t) 4 5 (face font-lock-keyword-face fontified t) 5 6 (face font-lock-keyword-face fontified t) 6 7 (c-type c-decl-id-start face font-lock-keyword-face fontified t)) . -170) (undo-tree-id434 . -7) 177) nil (25221 54853 1312 854000) 0 nil])
([nil nil ((170 . 171) (#("	" 0 1 (fontified nil)) . 169) (undo-tree-id433 . -1) (170 . 171)) nil (25221 54853 1306 696000) 0 nil])
([nil nil ((171 . 179)) nil (25221 54853 1300 794000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -178) (undo-tree-id432 . -1) 179) nil (25221 54853 1297 372000) 0 nil])
([nil nil ((178 . 185)) nil (25221 54853 1292 353000) 0 nil])
([nil nil ((185 . 187)) nil (25221 54853 1289 668000) 0 nil])
([nil nil ((186 . 187)) nil (25221 54853 1286 972000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -186) (undo-tree-id431 . -1) 187) nil (25221 54853 1283 637000) 0 nil])
([nil nil ((186 . 196)) nil (25221 54853 1277 978000) 0 nil])
([nil nil ((197 . 199)) nil (25221 54853 1275 208000) 0 nil])
([nil nil ((197 . 198)) nil (25221 54853 1272 377000) 0 nil])
([nil nil ((201 . 202) (#("	" 0 1 (fontified nil)) . 200) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (199 . 202)) nil (25221 54853 1267 29000) 0 nil])
([nil nil ((200 . 205)) nil (25221 54853 1218 476000) 0 nil])
([nil nil ((200 . 205) (#("	" 0 1 (fontified nil)) . -200) (undo-tree-id27 . -1) (#("    " 0 4 (fontified t)) . 201) (t 25221 54853 17300 317000)) nil (25221 55579 28940 37000) 0 nil])
([nil nil ((204 . 205)) nil (25221 55579 28933 797000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -204) (undo-tree-id26 . -1) 205) nil (25221 55579 28930 222000) 0 nil])
([nil nil ((204 . 219)) nil (25221 55579 28925 516000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -208) (undo-tree-id15 . -1) (#(" " 0 1 (fontified t)) . -209) (undo-tree-id16 . -1) (#("e" 0 1 (fontified t)) . -210) (undo-tree-id17 . -1) (#("l" 0 1 (fontified t)) . -211) (undo-tree-id18 . -1) (#("e" 0 1 (fontified t)) . -212) (undo-tree-id19 . -1) (#("m" 0 1 (fontified t)) . -213) (undo-tree-id20 . -1) (#("e" 0 1 (fontified t)) . -214) (undo-tree-id21 . -1) (#("n" 0 1 (fontified t)) . -215) (undo-tree-id22 . -1) (#("t" 0 1 (fontified t)) . -216) (undo-tree-id23 . -1) (#("o" 0 1 (fontified t)) . -217) (undo-tree-id24 . -1) (#(" " 0 1 (fontified t)) . -218) (undo-tree-id25 . -1) 219) nil (25221 55579 28916 993000) 0 nil])
([nil nil ((208 . 210)) nil (25221 55579 28890 623000) 0 nil])
([nil nil ((209 . 217) (#("elemento : E" 0 12 (fontified nil)) . -209) (209 . 221) (#("e" 0 1 (fontified t)) . -209) (undo-tree-id13 . -1) (undo-tree-id14 . -1) 210) nil (25221 55579 28886 754000) 0 nil])
([nil nil ((217 . 224)) nil (25221 55579 28878 283000) 0 nil])
([nil nil ((220 . 228) (#("elem" 0 4 (fontified nil)) . 220) (220 . 224) (#("elemento : E" 0 12 (fontified nil)) . -220) (220 . 232) (#("elem" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -220) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -4) (undo-tree-id12 . -4) 224) nil (25221 55579 28872 800000) 0 nil])
([nil nil ((200 . 205) (#("	   " 0 4 (fontified nil)) . 200) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (228 . 229)) nil (25221 55579 28838 577000) 0 nil])
([nil nil ((#("private" 0 7 (fontified t face font-lock-keyword-face)) . -46) (undo-tree-id49 . -7) 53 (t 25221 55579 45645 751000)) nil (25221 55638 703317 344000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -45) (undo-tree-id48 . -1) 46) nil (25221 55638 703311 112000) 0 nil])
([nil nil ((#("protected" 0 9 (fontified t face font-lock-keyword-face)) . -36) (undo-tree-id28 . -9) (undo-tree-id29 . -9) (undo-tree-id30 . -9) (undo-tree-id31 . -9) (undo-tree-id32 . -9) (undo-tree-id33 . -9) (undo-tree-id34 . -9) (undo-tree-id35 . -9) (undo-tree-id36 . -9) (undo-tree-id37 . -9) (undo-tree-id38 . -9) (undo-tree-id39 . -9) (undo-tree-id40 . -9) (undo-tree-id41 . -9) (undo-tree-id42 . -9) (undo-tree-id43 . -9) (undo-tree-id44 . -9) (undo-tree-id45 . -9) (undo-tree-id46 . -9) (undo-tree-id47 . -9) 45) nil (25221 55638 703303 10000) 0 nil])
([nil nil ((36 . 43)) nil (25221 55638 703235 830000) 0 nil])
([nil nil ((224 . 226) (t 25221 55638 720249 503000) 223) nil (25221 56295 545486 282000) 0 nil])
([nil nil ((226 . 244)) nil (25221 56295 545482 233000) 0 nil])
([nil nil ((244 . 246)) nil (25221 56295 545479 827000) 0 nil])
([nil nil ((246 . 248)) nil (25221 56295 545477 390000) 0 nil])
([nil nil ((246 . 247)) nil (25221 56295 545474 863000) 0 nil])
([nil nil ((250 . 251) (#("	" 0 1 (fontified nil)) . 249) (undo-tree-id84 . -1) (248 . 251)) nil (25221 56295 545471 256000) 0 nil])
([nil nil ((249 . 254)) nil (25221 56295 545465 967000) 0 nil])
([nil nil ((254 . 269)) nil (25221 56295 545463 489000) 0 nil])
([nil nil ((269 . 270)) nil (25221 56295 545461 146000) 0 nil])
([nil nil ((273 . 275)) nil (25221 56295 545459 86000) 0 nil])
([nil nil ((275 . 290)) nil (25221 56295 545456 673000) 0 nil])
([nil nil ((290 . 292)) nil (25221 56295 545454 511000) 0 nil])
([nil nil ((233 . 235)) nil (25221 56295 545452 208000) 0 nil])
([nil nil ((284 . 289)) nil (25221 56295 545449 533000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -288) (undo-tree-id83 . -1) 289) nil (25221 56295 545445 991000) 0 nil])
([nil nil ((288 . 292)) nil (25221 56295 545441 564000) 0 nil])
([nil nil ((302 . 304)) nil (25221 56295 545439 317000) 0 nil])
([nil nil ((302 . 303)) nil (25221 56295 545437 98000) 0 nil])
([nil nil ((306 . 307) (#("	" 0 1 (fontified nil)) . 305) (undo-tree-id82 . -1) (304 . 307)) nil (25221 56295 545434 196000) 0 nil])
([nil nil ((305 . 310)) nil (25221 56295 545429 142000) 0 nil])
([nil nil ((310 . 322)) nil (25221 56295 545426 804000) 0 nil])
([nil nil ((322 . 323)) nil (25221 56295 545424 751000) 0 nil])
([nil nil ((326 . 328)) nil (25221 56295 545422 484000) 0 nil])
([nil nil ((328 . 337)) nil (25221 56295 545420 238000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -335) (undo-tree-id80 . -1) (#("o" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -336) (undo-tree-id81 . -1) 337) nil (25221 56295 545416 798000) 0 nil])
([nil nil ((335 . 341)) nil (25221 56295 545409 587000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t)) . -339) (undo-tree-id78 . -1) (#("e" 0 1 (fontified t)) . -340) (undo-tree-id79 . -1) 341) nil (25221 56295 545405 723000) 0 nil])
([nil nil ((339 . 340)) nil (25221 56295 545399 165000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -339) (undo-tree-id77 . -1) 340) nil (25221 56295 545396 164000) 0 nil])
([nil nil ((339 . 340)) nil (25221 56295 545391 580000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t)) . -339) (undo-tree-id76 . -1) 340) nil (25221 56295 545388 697000) 0 nil])
([nil nil ((339 . 345)) nil (25221 56295 545383 939000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t)) . -344) (undo-tree-id75 . -1) 345) nil (25221 56295 545380 925000) 0 nil])
([nil nil ((344 . 352)) nil (25221 56295 545373 142000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -351) (undo-tree-id74 . -1) 352) nil (25221 56295 545369 389000) 0 nil])
([nil nil ((351 . 352)) nil (25221 56295 545361 787000) 0 nil])
([nil nil ((352 . 354)) nil (25221 56295 545358 679000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -352) (undo-tree-id70 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -353) (undo-tree-id71 . -1) (undo-tree-id72 . 1) (undo-tree-id73 . -1) 354) nil (25221 56295 545341 882000) 0 nil])
([nil nil ((352 . 354)) nil (25221 56295 545326 572000) 0 nil])
([nil nil ((343 . 346)) nil (25221 56295 545324 365000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face font-lock-function-name-face)) . -346) (undo-tree-id69 . -1) 347) nil (25221 56295 545321 528000) 0 nil])
([nil nil ((346 . 347)) nil (25221 56295 545317 58000) 0 nil])
([nil nil ((357 . 359)) nil (25221 56295 545314 708000) 0 nil])
([nil nil ((#("ñ" 0 1 (fontified t)) . -358) (undo-tree-id68 . -1) 359) nil (25221 56295 545311 563000) 0 nil])
([nil nil ((358 . 360)) nil (25221 56295 545306 194000) 0 nil])
([nil nil ((361 . 362) (#("	" 0 1 (fontified nil)) . 360) (undo-tree-id67 . -1) (359 . 362)) nil (25221 56295 545303 166000) 0 nil])
([nil nil ((360 . 365)) nil (25221 56295 545297 677000) 0 nil])
([nil nil ((365 . 381)) nil (25221 56295 545295 494000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -377) (undo-tree-id63 . -1) (#("e" 0 1 (fontified t)) . -378) (undo-tree-id64 . -1) (#("d" 0 1 (fontified t)) . -379) (undo-tree-id65 . -1) (#("o" 0 1 (fontified t)) . -380) (undo-tree-id66 . -1) 381) nil (25221 56295 545290 836000) 0 nil])
([nil nil ((377 . 381)) nil (25221 56295 545279 312000) 0 nil])
([nil nil ((381 . 382)) nil (25221 56295 545276 849000) 0 nil])
([nil nil ((385 . 387)) nil (25221 56295 545274 326000) 0 nil])
([nil nil ((387 . 399)) nil (25221 56295 545272 195000) 0 nil])
([nil nil ((399 . 400)) nil (25221 56295 545269 561000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t)) . -398) (undo-tree-id61 . -1) (#("e" 0 1 (fontified t)) . -399) (undo-tree-id62 . -1) 400) nil (25221 56295 545265 435000) 0 nil])
([nil nil ((398 . 403)) nil (25221 56295 545258 361000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -402) (undo-tree-id60 . -1) 403) nil (25221 56295 545254 750000) 0 nil])
([nil nil ((402 . 412)) nil (25221 56295 545249 961000) 0 nil])
([nil nil ((412 . 414)) nil (25221 56295 545247 836000) 0 nil])
([nil nil ((414 . 415)) nil (25221 56295 545245 335000) 0 nil])
([nil nil ((415 . 417)) nil (25221 56295 545242 933000) 0 nil])
([nil nil ((418 . 419) (#("	" 0 1 (fontified nil)) . 417) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (416 . 419)) nil (25221 56295 545237 936000) 0 nil])
([nil nil ((417 . 422)) nil (25221 56295 545201 512000) 0 nil])
([nil nil ((422 . 429)) nil (25221 56295 545199 281000) 0 nil])
([nil nil ((429 . 436)) nil (25221 56295 545195 875000) 0 nil])
([nil nil ((436 . 437)) nil (25221 56295 545184 477000) 0 nil])
([nil nil ((#("	private E elemento;
	private Nodo<E> padre;
	private Nodo<E> izquierdo;
	private Nodo<E> derecho;

	public Nodo<E>(E elemento) {
	    this.elemento = elemento; 
	}
	public E getElemento() {
	    return elemento;
	}
	public Nodo<E> getPadre() {
	    return padre;
	}
	public Nodo<E> getIzquierdo() {
	    return izquierdo;
	}
	public Nodo<E> getDerecho() {
	    return derecho;
	}
" 0 1 (fontified t) 1 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 10 (fontified t c-type c-decl-id-start face font-lock-type-face) 10 11 (fontified t) 11 19 (fontified t face font-lock-variable-name-face) 19 22 (fontified t) 22 29 (fontified t face font-lock-keyword-face) 29 30 (fontified t) 30 34 (fontified t face font-lock-type-face) 34 35 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 35 36 (fontified t face font-lock-type-face) 36 37 (category c->-as-paren-syntax fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 37 38 (fontified t) 38 43 (fontified t face font-lock-variable-name-face) 43 46 (fontified t) 46 53 (fontified t face font-lock-keyword-face) 53 54 (fontified t) 54 58 (fontified t face font-lock-type-face) 58 59 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 59 60 (fontified t face font-lock-type-face) 60 61 (category c->-as-paren-syntax fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 61 62 (fontified t) 62 71 (fontified t face font-lock-variable-name-face) 71 74 (fontified t) 74 81 (fontified t face font-lock-keyword-face) 81 82 (fontified t) 82 86 (fontified t face font-lock-type-face) 86 87 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 87 88 (fontified t face font-lock-type-face) 88 89 (category c->-as-paren-syntax fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 89 90 (fontified t) 90 97 (fontified t face font-lock-variable-name-face) 97 101 (fontified t) 101 106 (fontified t face font-lock-keyword-face) 106 107 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 107 108 (fontified t) 108 112 (fontified t face font-lock-function-name-face) 112 113 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 113 114 (fontified t face font-lock-type-face) 114 115 (category c->-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 115 116 (fontified t c-type c-decl-arg-start face (rainbow-delimiters-depth-3-face)) 116 117 (fontified t face font-lock-type-face) 117 118 (fontified t) 118 126 (fontified t face font-lock-variable-name-face) 126 127 (fontified t face (rainbow-delimiters-depth-3-face)) 127 128 (fontified t) 128 129 (fontified t face (rainbow-delimiters-depth-3-face)) 129 130 (fontified t) 130 135 (fontified t) 135 136 (fontified t face font-lock-keyword-face) 136 137 (fontified t face font-lock-keyword-face) 137 138 (fontified t face font-lock-keyword-face) 138 139 (fontified t face font-lock-keyword-face) 139 140 (fontified t) 140 148 (fontified t) 148 149 (fontified t) 149 150 (fontified t) 150 151 (fontified t) 151 159 (fontified t) 159 160 (fontified t) 160 161 (fontified t) 161 162 (fontified t) 162 163 (fontified t) 163 164 (fontified t face (rainbow-delimiters-depth-3-face)) 164 165 (fontified t) 165 166 (fontified t) 166 167 (fontified t face font-lock-keyword-face) 167 168 (fontified t face font-lock-keyword-face) 168 169 (fontified t face font-lock-keyword-face) 169 170 (fontified t face font-lock-keyword-face) 170 171 (fontified t face font-lock-keyword-face) 171 172 (fontified t face font-lock-keyword-face) 172 173 (fontified t) 173 174 (fontified t c-type c-decl-id-start face font-lock-type-face) 174 175 (fontified t) 175 176 (fontified t face font-lock-function-name-face) 176 177 (fontified t face font-lock-function-name-face) 177 178 (fontified t face font-lock-function-name-face) 178 179 (fontified t face font-lock-function-name-face) 179 180 (fontified t face font-lock-function-name-face) 180 181 (fontified t face font-lock-function-name-face) 181 182 (fontified t face font-lock-function-name-face) 182 183 (fontified t face font-lock-function-name-face) 183 184 (fontified t face font-lock-function-name-face) 184 185 (fontified t face font-lock-function-name-face) 185 186 (fontified t face font-lock-function-name-face) 186 187 (fontified t face (rainbow-delimiters-depth-3-face)) 187 188 (fontified t face (rainbow-delimiters-depth-3-face)) 188 189 (fontified t) 189 190 (fontified t face (rainbow-delimiters-depth-3-face)) 190 191 (fontified t) 191 196 (fontified t) 196 197 (fontified t face font-lock-keyword-face) 197 198 (fontified t face font-lock-keyword-face) 198 199 (fontified t face font-lock-keyword-face) 199 200 (fontified t face font-lock-keyword-face) 200 201 (fontified t face font-lock-keyword-face) 201 202 (fontified t face font-lock-keyword-face) 202 203 (fontified t) 203 204 (fontified t) 204 205 (fontified t) 205 206 (fontified t) 206 207 (fontified t) 207 208 (fontified t) 208 209 (fontified t) 209 210 (fontified t) 210 211 (fontified t) 211 212 (fontified t) 212 213 (fontified t) 213 214 (fontified t) 214 215 (fontified t face (rainbow-delimiters-depth-3-face)) 215 216 (fontified t) 216 217 (fontified t) 217 218 (fontified t face font-lock-keyword-face) 218 219 (fontified t face font-lock-keyword-face) 219 220 (fontified t face font-lock-keyword-face) 220 221 (fontified t face font-lock-keyword-face) 221 222 (fontified t face font-lock-keyword-face) 222 223 (fontified t face font-lock-keyword-face) 223 224 (fontified t) 224 225 (fontified t face font-lock-type-face) 225 226 (fontified t face font-lock-type-face) 226 227 (fontified t face font-lock-type-face) 227 228 (fontified t face font-lock-type-face) 228 229 (fontified t category c-<-as-paren-syntax face (rainbow-delimiters-depth-3-face)) 229 230 (fontified t face font-lock-type-face) 230 231 (fontified t category c->-as-paren-syntax c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 231 232 (fontified t) 232 233 (fontified t face font-lock-function-name-face) 233 234 (fontified t face font-lock-function-name-face) 234 235 (fontified t face font-lock-function-name-face) 235 236 (fontified t face font-lock-function-name-face) 236 237 (fontified t face font-lock-function-name-face) 237 238 (fontified t face font-lock-function-name-face) 238 239 (fontified t face font-lock-function-name-face) 239 240 (fontified t face font-lock-function-name-face) 240 241 (fontified t face (rainbow-delimiters-depth-3-face)) 241 242 (fontified t face (rainbow-delimiters-depth-3-face)) 242 243 (fontified t) 243 244 (fontified t face (rainbow-delimiters-depth-3-face)) 244 245 (fontified t) 245 250 (fontified t) 250 251 (fontified t face font-lock-keyword-face) 251 252 (fontified t face font-lock-keyword-face) 252 253 (fontified t face font-lock-keyword-face) 253 254 (fontified t face font-lock-keyword-face) 254 255 (fontified t face font-lock-keyword-face) 255 256 (fontified t face font-lock-keyword-face) 256 257 (fontified t) 257 258 (fontified t) 258 259 (fontified t) 259 260 (fontified t) 260 261 (fontified t) 261 262 (fontified t) 262 263 (fontified t) 263 264 (fontified t) 264 265 (fontified t) 265 266 (fontified t face (rainbow-delimiters-depth-3-face)) 266 267 (fontified t) 267 268 (fontified t) 268 269 (fontified t face font-lock-keyword-face) 269 270 (fontified t face font-lock-keyword-face) 270 271 (fontified t face font-lock-keyword-face) 271 273 (fontified t face font-lock-keyword-face) 273 274 (fontified t face font-lock-keyword-face) 274 275 (fontified t) 275 276 (fontified t face font-lock-type-face) 276 277 (fontified t face font-lock-type-face) 277 278 (fontified t face font-lock-type-face) 278 279 (fontified t face font-lock-type-face) 279 280 (fontified t category c-<-as-paren-syntax face (rainbow-delimiters-depth-3-face)) 280 281 (fontified t face font-lock-type-face) 281 282 (fontified t category c->-as-paren-syntax c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 282 283 (fontified t) 283 284 (fontified t face font-lock-function-name-face) 284 285 (fontified t face font-lock-function-name-face) 285 286 (fontified t face font-lock-function-name-face) 286 287 (fontified t face font-lock-function-name-face) 287 288 (fontified t face font-lock-function-name-face) 288 289 (fontified t face font-lock-function-name-face) 289 290 (fontified t face font-lock-function-name-face) 290 291 (fontified t face font-lock-function-name-face) 291 293 (fontified t face font-lock-function-name-face) 293 294 (fontified t face font-lock-function-name-face) 294 295 (fontified t face font-lock-function-name-face) 295 296 (fontified t face (rainbow-delimiters-depth-3-face)) 296 297 (fontified t face (rainbow-delimiters-depth-3-face)) 297 298 (fontified t) 298 299 (fontified t face (rainbow-delimiters-depth-3-face)) 299 300 (fontified t) 300 305 (fontified t) 305 306 (fontified t face font-lock-keyword-face) 306 307 (fontified t face font-lock-keyword-face) 307 308 (fontified t face font-lock-keyword-face) 308 309 (fontified t face font-lock-keyword-face) 309 310 (fontified t face font-lock-keyword-face) 310 311 (fontified t face font-lock-keyword-face) 311 312 (fontified t) 312 313 (fontified t) 313 314 (fontified t) 314 315 (fontified t) 315 316 (fontified t) 316 317 (fontified t) 317 318 (fontified t) 318 319 (fontified t) 319 320 (fontified t) 320 321 (fontified t) 321 322 (fontified t) 322 323 (fontified t) 323 324 (fontified t) 324 325 (fontified t face (rainbow-delimiters-depth-3-face)) 325 326 (fontified t) 326 327 (fontified t) 327 328 (fontified t face font-lock-keyword-face) 328 329 (fontified t face font-lock-keyword-face) 329 330 (fontified t face font-lock-keyword-face) 330 331 (fontified t face font-lock-keyword-face) 331 332 (fontified t face font-lock-keyword-face) 332 333 (fontified t face font-lock-keyword-face) 333 334 (fontified t) 334 335 (fontified t face font-lock-type-face) 335 336 (fontified t face font-lock-type-face) 336 337 (fontified t face font-lock-type-face) 337 338 (fontified t face font-lock-type-face) 338 339 (fontified t category c-<-as-paren-syntax face (rainbow-delimiters-depth-3-face)) 339 340 (fontified t face font-lock-type-face) 340 341 (fontified t category c->-as-paren-syntax c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 341 342 (fontified t) 342 343 (fontified t face font-lock-function-name-face) 343 344 (fontified t face font-lock-function-name-face) 344 345 (fontified t face font-lock-function-name-face) 345 346 (fontified t face font-lock-function-name-face) 346 347 (fontified t face font-lock-function-name-face) 347 348 (fontified t face font-lock-function-name-face) 348 349 (fontified t face font-lock-function-name-face) 349 350 (fontified t face font-lock-function-name-face) 350 351 (fontified t face font-lock-function-name-face) 351 352 (fontified t face font-lock-function-name-face) 352 353 (fontified t face (rainbow-delimiters-depth-3-face)) 353 354 (fontified t face (rainbow-delimiters-depth-3-face)) 354 355 (fontified t) 355 356 (fontified t face (rainbow-delimiters-depth-3-face)) 356 357 (fontified t) 357 362 (fontified t) 362 363 (fontified t face font-lock-keyword-face) 363 364 (fontified t face font-lock-keyword-face) 364 365 (fontified t face font-lock-keyword-face) 365 366 (fontified t face font-lock-keyword-face) 366 367 (fontified t face font-lock-keyword-face) 367 368 (fontified t face font-lock-keyword-face) 368 369 (fontified t) 369 370 (fontified t) 370 371 (fontified t) 371 372 (fontified t) 372 373 (fontified t) 373 374 (fontified t) 374 375 (fontified t) 375 376 (fontified t) 376 377 (fontified t) 377 378 (fontified t) 378 379 (fontified t) 379 380 (fontified t face (rainbow-delimiters-depth-3-face)) 380 381 (fontified t)) . 60) (undo-tree-id1227 . -151) (undo-tree-id1228 . -379) (undo-tree-id1229 . -151) (undo-tree-id1230 . 4) (undo-tree-id1231 . -11) (undo-tree-id1232 . -19) (undo-tree-id1233 . -114) (undo-tree-id1234 . -115) (undo-tree-id1235 . -118) (undo-tree-id1236 . -126) (undo-tree-id1237 . -135) (undo-tree-id1238 . -159) (undo-tree-id1239 . -379) (undo-tree-id1240 . -1) (undo-tree-id1241 . -379) (undo-tree-id1242 . -381) (undo-tree-id1243 . -1) (undo-tree-id1244 . -379) (undo-tree-id1245 . -378) (undo-tree-id1246 . -379) (undo-tree-id1247 . -379) (undo-tree-id1248 . -379) (undo-tree-id1249 . -379) (undo-tree-id1250 . -379) (undo-tree-id1251 . -379) (undo-tree-id1252 . -379) (undo-tree-id1253 . -379) (undo-tree-id1254 . 2) (undo-tree-id1255 . -380) (undo-tree-id1256 . 26) (undo-tree-id1257 . -356) (undo-tree-id1258 . -379) (undo-tree-id1259 . -379) (undo-tree-id1260 . -379) (undo-tree-id1261 . -379) (undo-tree-id1262 . -379) (undo-tree-id1263 . -379) (undo-tree-id1264 . -379) (undo-tree-id1265 . -379) 439 (t 25221 56295 725949 743000)) nil (25221 56322 861525 133000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -61) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) 62 (61 . 62) (60 . 61) (61 . 65) (#("    " 0 4 (fontified nil)) . 60) (undo-tree-id140 . -4) (undo-tree-id141 . -4) (undo-tree-id142 . -4) (undo-tree-id143 . -4) (undo-tree-id144 . -4) (undo-tree-id145 . -4) (undo-tree-id146 . -4) (undo-tree-id147 . -4) (undo-tree-id148 . -4) (undo-tree-id149 . -4) (59 . 65) (58 . 60) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -58) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (#("
" 0 1 (fontified t)) . -59) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (#("
" 0 1 (fontified t)) . -60) (undo-tree-id618 . -1) (undo-tree-id619 . 1) (undo-tree-id620 . -1) (undo-tree-id621 . 1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . 1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (#(" " 0 1 (fontified t)) . -61) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (#(" " 0 1 (fontified t)) . -62) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (#(" " 0 1 (fontified t)) . -63) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (#(" " 0 1 (fontified t)) . -64) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -65) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . 1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) 66 (61 . 65) (#("    " 0 4 (fontified nil)) . 60) (undo-tree-id1164 . -4) (undo-tree-id1165 . 4) (undo-tree-id1166 . 4) (undo-tree-id1167 . -4) (undo-tree-id1168 . -4) (undo-tree-id1169 . -4) (undo-tree-id1170 . -4) (undo-tree-id1171 . -4) (undo-tree-id1172 . -4) (undo-tree-id1173 . -4) (undo-tree-id1174 . -4) (undo-tree-id1175 . -4) (undo-tree-id1176 . -4) (undo-tree-id1177 . -4) (undo-tree-id1178 . -4) (undo-tree-id1179 . -4) (undo-tree-id1180 . -4) (undo-tree-id1181 . -4) (undo-tree-id1182 . -4) (undo-tree-id1183 . -4) (undo-tree-id1184 . -4) (undo-tree-id1185 . -4) (undo-tree-id1186 . -4) (undo-tree-id1187 . -4) (undo-tree-id1188 . -4) (undo-tree-id1189 . -4) (undo-tree-id1190 . -4) (undo-tree-id1191 . -4) (undo-tree-id1192 . -4) (undo-tree-id1193 . -4) (undo-tree-id1194 . -4) (undo-tree-id1195 . -4) (undo-tree-id1196 . -4) (undo-tree-id1197 . -4) (undo-tree-id1198 . -4) (undo-tree-id1199 . -4) (undo-tree-id1200 . -4) (undo-tree-id1201 . -4) (undo-tree-id1202 . -4) (undo-tree-id1203 . -4) (undo-tree-id1204 . -4) (undo-tree-id1205 . -4) (undo-tree-id1206 . -4) (undo-tree-id1207 . -4) (undo-tree-id1208 . -4) (undo-tree-id1209 . -4) (undo-tree-id1210 . -4) (undo-tree-id1211 . -4) (undo-tree-id1212 . -4) (undo-tree-id1213 . -4) (undo-tree-id1214 . -4) (undo-tree-id1215 . -4) (undo-tree-id1216 . -4) (undo-tree-id1217 . -4) (undo-tree-id1218 . -4) (undo-tree-id1219 . -4) (undo-tree-id1220 . -4) (undo-tree-id1221 . -4) (undo-tree-id1222 . -4) (undo-tree-id1223 . -4) (undo-tree-id1224 . -4) (undo-tree-id1225 . -4) (undo-tree-id1226 . -4) (64 . 65)) nil (25221 56322 861335 924000) 0 nil])
([nil nil ((nil rear-nonsticky nil 62 . 63) (#("
" 0 1 (fontified nil)) . -442) (61 . 443) 60) nil (25221 56322 859070 924000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 60) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -2)) nil (25221 56322 859057 498000) 0 nil])
([nil nil ((#("private" 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t face font-lock-keyword-face)) . -36) (undo-tree-id1266 . -7) 43 (t 25221 56322 884238 612000)) nil (25221 56336 838848 363000) 0 nil])
([nil nil ((36 . 45)) nil (25221 56336 838818 757000) 0 nil])
([nil nil ((213 . 216) (t 25221 56336 880387 482000)) nil (25221 56356 687110 465000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -216) (undo-tree-id1267 . -1) (undo-tree-id1268 . 1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) 217) nil (25221 56356 687104 284000) 0 nil])
([nil nil ((216 . 217)) nil (25221 56356 687042 964000) 0 nil])
([nil nil ((224 . 226)) nil (25221 56356 687031 832000) 0 nil])
([nil nil ((#("getElemento()" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 11 (fontified t) 11 12 (fontified t face (rainbow-delimiters-depth-4-face)) 12 13 (fontified t face (rainbow-delimiters-depth-4-face))) . -213) (undo-tree-id1287 . -13) (undo-tree-id1288 . 9) (undo-tree-id1289 . -8) (undo-tree-id1290 . 1) (undo-tree-id1291 . -13) (undo-tree-id1292 . 2) (undo-tree-id1293 . -12) 226 (t 25221 56356 708598 389000)) nil (25221 56364 649455 717000) 0 nil])
([nil nil ((213 . 215)) nil (25221 56364 649420 359000) 0 nil])
([nil nil ((215 . 221)) nil (25221 56364 649409 371000) 0 nil])
([nil nil ((212 . 213) (t 25221 56364 669683 69000)) nil (25221 56370 106114 920000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -212) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) 213) nil (25221 56370 106102 396000) 0 nil])
([nil nil ((177 . 178) (t 25221 56370 128741 134000)) nil (25221 56372 297211 810000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -77) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -78) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -79) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -80) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) 81 (t 25221 56372 318764 428000)) nil (25221 56408 73139 54000) 0 nil])
([nil nil ((#("elem" 0 4 (fontified t face font-lock-variable-name-face)) . -73) (undo-tree-id1334 . -4) (undo-tree-id1335 . -4) 77) nil (25221 56408 73118 601000) 0 nil])
([nil nil ((73 . 81)) nil (25221 56408 73111 153000) 0 nil])
([nil nil ((#("elmentos" 0 1 (fontified t face font-lock-variable-name-face) 1 2 (fontified t face font-lock-variable-name-face) 2 3 (fontified t face font-lock-variable-name-face) 3 4 (fontified t face font-lock-variable-name-face) 4 5 (fontified t face font-lock-variable-name-face) 5 6 (fontified t face font-lock-variable-name-face) 6 7 (fontified t face font-lock-variable-name-face) 7 8 (fontified t face font-lock-variable-name-face)) . -73) (undo-tree-id1333 . -8) 81) nil (25221 56408 73107 917000) 0 nil])
([nil nil ((73 . 82)) nil (25221 56408 73097 803000) 0 nil])
([nil nil ((#("private" 0 7 (fontified t face font-lock-keyword-face)) . -63) (undo-tree-id1332 . -7) 70) nil (25221 56408 73093 949000) 0 nil])
([nil nil ((63 . 64)) nil (25221 56408 73088 519000) 0 nil])
([nil nil ((64 . 70)) nil (25221 56408 73085 516000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -69) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) 70) nil (25221 56408 73074 275000) 0 nil])
([nil nil ((#("protected" 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t face font-lock-keyword-face)) . -36) (undo-tree-id1344 . -9) 45 (t 25221 56408 95144 970000)) nil (25221 56412 81741 175000) 0 nil])
([nil nil ((36 . 42)) nil (25221 56412 81713 451000) 0 nil])
([nil nil ((#("private" 0 7 (fontified t face font-lock-keyword-face)) . -81) (undo-tree-id1355 . -7) 88 (t 25221 56412 105187 623000)) nil (25221 56417 57952 697000) 0 nil])
([nil nil ((81 . 88)) nil (25221 56417 57946 400000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -87) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) 88) nil (25221 56417 57935 117000) 0 nil])
([nil nil ((#("public" 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face)) . -60) (undo-tree-id1356 . -6) (undo-tree-id1357 . -6) (undo-tree-id1358 . -6) (undo-tree-id1359 . -6) (undo-tree-id1360 . -6) (undo-tree-id1361 . -6) (undo-tree-id1362 . -6) (undo-tree-id1363 . -6) (undo-tree-id1364 . -6) (undo-tree-id1365 . -6) 66 (t 25221 56417 82240 562000)) nil (25221 56418 842444 200000) 0 nil])
([nil nil ((61 . 69) (t 25221 56418 866259 538000)) nil (25221 56446 30655 441000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -60) (undo-tree-id1374 . -1) (undo-tree-id1375 . 1) 61) nil (25221 56446 30651 255000) 0 nil])
([nil nil ((#("public" 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face)) . -82) (undo-tree-id1373 . -6) 88) nil (25221 56446 30638 586000) 0 nil])
([nil nil ((82 . 88)) nil (25221 56446 30633 110000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -87) (undo-tree-id1372 . -1) 88) nil (25221 56446 30629 489000) 0 nil])
([nil nil ((87 . 90)) nil (25221 56446 30623 811000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -89) (undo-tree-id1371 . -1) 90) nil (25221 56446 30620 205000) 0 nil])
([nil nil ((#("public" 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face)) . -36) (undo-tree-id1370 . -6) 42) nil (25221 56446 30614 159000) 0 nil])
([nil nil ((36 . 44)) nil (25221 56446 30608 600000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -43) (undo-tree-id1369 . -1) 44) nil (25221 56446 30605 33000) 0 nil])
([nil nil ((#("private" 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t face font-lock-keyword-face)) . -36) (undo-tree-id1368 . -7) 43) nil (25221 56446 30598 445000) 0 nil])
([nil nil ((36 . 46)) nil (25221 56446 30592 865000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -45) (undo-tree-id1367 . -1) 46) nil (25221 56446 30589 265000) 0 nil])
([nil nil ((#("protected" 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t face font-lock-keyword-face)) . -36) (undo-tree-id1366 . -9) 45) nil (25221 56446 30581 244000) 0 nil])
([nil nil ((36 . 43)) nil (25221 56446 30552 13000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t c-type c-decl-type-start face font-lock-type-face)) . -43) (undo-tree-id1398 . -1) 44 (43 . 44) (#("i" 0 1 (fontified t c-type c-decl-type-start face font-lock-type-face)) . -43) (undo-tree-id1399 . -1) 44 (43 . 44) (t 25221 56446 52548 715000)) nil (25221 56521 779702 170000) 0 nil])
([nil nil ((#("    private class Nodo<E> {
	private E elementos;
	private Nodo<E> padre;
	private Nodo<E> izquierdo;
	private Nodo<E> derecho;

	public Nodo<E> (E elemento) {
	    this.elemento = elemento; 
	}
	public E getElemento() {
	    return elemento;
	}
	public Nodo<E> getPadre() {
	    return padre;
	}
	public Nodo<E> getIzquierdo() {
	    return izquierdo;
	}
	public Nodo<E> getDerecho() {
	    return derecho;
	}
    }
" 0 4 (fontified t) 4 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 16 (fontified t face font-lock-keyword-face) 16 17 (fontified t face font-lock-keyword-face c-type c-decl-type-start) 17 18 (fontified t) 18 22 (fontified t face font-lock-type-face) 22 23 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-2-face)) 23 24 (fontified t face font-lock-type-face) 24 25 (category c->-as-paren-syntax fontified t face (rainbow-delimiters-depth-2-face)) 25 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-2-face)) 27 28 (fontified t) 28 29 (rear-nonsticky t fontified t) 29 30 (fontified t face font-lock-keyword-face) 30 31 (fontified t face font-lock-keyword-face) 31 32 (fontified t face font-lock-keyword-face) 32 33 (fontified t face font-lock-keyword-face) 33 34 (fontified t face font-lock-keyword-face) 34 35 (fontified t face font-lock-keyword-face) 35 36 (fontified t face font-lock-keyword-face) 36 37 (fontified t) 37 38 (fontified t c-type c-decl-id-start face font-lock-type-face) 38 39 (fontified t) 39 40 (fontified t face font-lock-variable-name-face) 40 41 (fontified t face font-lock-variable-name-face) 41 42 (fontified t face font-lock-variable-name-face) 42 43 (fontified t face font-lock-variable-name-face) 43 44 (fontified t face font-lock-variable-name-face) 44 45 (fontified t face font-lock-variable-name-face) 45 46 (fontified t face font-lock-variable-name-face) 46 47 (fontified t face font-lock-variable-name-face) 47 48 (fontified t face font-lock-variable-name-face) 48 49 (fontified t) 49 50 (fontified t) 50 51 (fontified t) 51 52 (fontified t face font-lock-keyword-face) 52 53 (fontified t face font-lock-keyword-face) 53 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t face font-lock-keyword-face) 55 56 (fontified t face font-lock-keyword-face) 56 57 (fontified t face font-lock-keyword-face) 57 58 (fontified t face font-lock-keyword-face) 58 59 (fontified t) 59 63 (fontified t face font-lock-type-face) 63 64 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 64 65 (fontified t face font-lock-type-face) 65 66 (category c->-as-paren-syntax fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 66 67 (fontified t) 67 72 (fontified t face font-lock-variable-name-face) 72 74 (fontified t) 74 75 (fontified t) 75 82 (fontified t face font-lock-keyword-face) 82 83 (fontified t) 83 87 (fontified t face font-lock-type-face) 87 88 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 88 89 (fontified t face font-lock-type-face) 89 90 (category c->-as-paren-syntax fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 90 91 (fontified t) 91 100 (fontified t face font-lock-variable-name-face) 100 103 (fontified t) 103 110 (fontified t face font-lock-keyword-face) 110 111 (fontified t) 111 115 (fontified t face font-lock-type-face) 115 116 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 116 117 (fontified t face font-lock-type-face) 117 118 (category c->-as-paren-syntax fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 118 119 (fontified t) 119 126 (fontified t face font-lock-variable-name-face) 126 129 (fontified t) 129 130 (fontified t) 130 135 (fontified t face font-lock-keyword-face) 135 136 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 136 137 (fontified t) 137 141 (fontified t face font-lock-function-name-face) 141 142 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 142 143 (fontified t face font-lock-type-face) 143 144 (category c->-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 144 145 (fontified t) 145 146 (fontified t c-type c-decl-arg-start face (rainbow-delimiters-depth-3-face)) 146 147 (fontified t face font-lock-type-face) 147 148 (fontified t) 148 156 (fontified t face font-lock-variable-name-face) 156 157 (fontified t face (rainbow-delimiters-depth-3-face)) 157 158 (fontified t) 158 159 (fontified t face (rainbow-delimiters-depth-3-face)) 159 160 (fontified t) 160 165 (fontified t) 165 166 (fontified t face font-lock-keyword-face) 166 167 (fontified t face font-lock-keyword-face) 167 168 (fontified t face font-lock-keyword-face) 168 169 (fontified t face font-lock-keyword-face) 169 170 (fontified t) 170 178 (fontified t) 178 179 (fontified t) 179 180 (fontified t) 180 181 (fontified t) 181 182 (fontified t) 182 183 (fontified t) 183 184 (fontified t) 184 185 (fontified t) 185 186 (fontified t) 186 187 (fontified t) 187 188 (fontified t) 188 189 (fontified t) 189 190 (fontified t) 190 191 (fontified t) 191 192 (fontified t) 192 193 (fontified t) 193 194 (fontified t face (rainbow-delimiters-depth-3-face)) 194 195 (fontified t) 195 196 (fontified t) 196 197 (fontified t face font-lock-keyword-face) 197 198 (fontified t face font-lock-keyword-face) 198 199 (fontified t face font-lock-keyword-face) 199 200 (fontified t face font-lock-keyword-face) 200 201 (fontified t face font-lock-keyword-face) 201 202 (fontified t face font-lock-keyword-face) 202 203 (fontified t) 203 204 (fontified t c-type c-decl-id-start face font-lock-type-face) 204 205 (fontified t) 205 206 (fontified t face font-lock-function-name-face) 206 207 (fontified t face font-lock-function-name-face) 207 208 (fontified t face font-lock-function-name-face) 208 209 (fontified t face font-lock-function-name-face) 209 210 (fontified t face font-lock-function-name-face) 210 211 (fontified t face font-lock-function-name-face) 211 212 (fontified t face font-lock-function-name-face) 212 213 (fontified t face font-lock-function-name-face) 213 214 (fontified t face font-lock-function-name-face) 214 215 (fontified t face font-lock-function-name-face) 215 216 (fontified t face font-lock-function-name-face) 216 217 (fontified t face (rainbow-delimiters-depth-3-face)) 217 218 (fontified t face (rainbow-delimiters-depth-3-face)) 218 219 (fontified t) 219 220 (fontified t face (rainbow-delimiters-depth-3-face)) 220 221 (fontified t) 221 226 (fontified t) 226 227 (fontified t face font-lock-keyword-face) 227 228 (fontified t face font-lock-keyword-face) 228 229 (fontified t face font-lock-keyword-face) 229 230 (fontified t face font-lock-keyword-face) 230 231 (fontified t face font-lock-keyword-face) 231 232 (fontified t face font-lock-keyword-face) 232 233 (fontified t) 233 234 (fontified t) 234 235 (fontified t) 235 236 (fontified t) 236 237 (fontified t) 237 238 (fontified t) 238 239 (fontified t) 239 240 (fontified t) 240 241 (fontified t) 241 242 (fontified t) 242 243 (fontified t) 243 244 (fontified t) 244 245 (fontified t face (rainbow-delimiters-depth-3-face)) 245 246 (fontified t) 246 247 (fontified t) 247 248 (fontified t face font-lock-keyword-face) 248 249 (fontified t face font-lock-keyword-face) 249 250 (fontified t face font-lock-keyword-face) 250 251 (fontified t face font-lock-keyword-face) 251 252 (fontified t face font-lock-keyword-face) 252 253 (fontified t face font-lock-keyword-face) 253 254 (fontified t) 254 255 (fontified t face font-lock-type-face) 255 256 (fontified t face font-lock-type-face) 256 257 (fontified t face font-lock-type-face) 257 258 (fontified t face font-lock-type-face) 258 259 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 259 260 (fontified t face font-lock-type-face) 260 261 (category c->-as-paren-syntax fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 261 262 (fontified t) 262 263 (fontified t face font-lock-function-name-face) 263 264 (fontified t face font-lock-function-name-face) 264 265 (fontified t face font-lock-function-name-face) 265 266 (fontified t face font-lock-function-name-face) 266 267 (fontified t face font-lock-function-name-face) 267 268 (fontified t face font-lock-function-name-face) 268 269 (fontified t face font-lock-function-name-face) 269 270 (fontified t face font-lock-function-name-face) 270 271 (fontified t face (rainbow-delimiters-depth-3-face)) 271 272 (fontified t face (rainbow-delimiters-depth-3-face)) 272 273 (fontified t) 273 274 (fontified t face (rainbow-delimiters-depth-3-face)) 274 275 (fontified t) 275 280 (fontified t) 280 281 (fontified t face font-lock-keyword-face) 281 282 (fontified t face font-lock-keyword-face) 282 283 (fontified t face font-lock-keyword-face) 283 284 (fontified t face font-lock-keyword-face) 284 285 (fontified t face font-lock-keyword-face) 285 286 (fontified t face font-lock-keyword-face) 286 287 (fontified t) 287 288 (fontified t) 288 289 (fontified t) 289 290 (fontified t) 290 291 (fontified t) 291 292 (fontified t) 292 293 (fontified t) 293 294 (fontified t) 294 295 (fontified t) 295 296 (fontified t face (rainbow-delimiters-depth-3-face)) 296 297 (fontified t) 297 298 (fontified t) 298 299 (fontified t face font-lock-keyword-face) 299 300 (fontified t face font-lock-keyword-face) 300 301 (fontified t face font-lock-keyword-face) 301 303 (fontified t face font-lock-keyword-face) 303 304 (fontified t face font-lock-keyword-face) 304 305 (fontified t) 305 306 (fontified t face font-lock-type-face) 306 307 (fontified t face font-lock-type-face) 307 308 (fontified t face font-lock-type-face) 308 309 (fontified t face font-lock-type-face) 309 310 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 310 311 (fontified t face font-lock-type-face) 311 312 (category c->-as-paren-syntax fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 312 313 (fontified t) 313 314 (fontified t face font-lock-function-name-face) 314 315 (fontified t face font-lock-function-name-face) 315 316 (fontified t face font-lock-function-name-face) 316 317 (fontified t face font-lock-function-name-face) 317 318 (fontified t face font-lock-function-name-face) 318 319 (fontified t face font-lock-function-name-face) 319 320 (fontified t face font-lock-function-name-face) 320 321 (fontified t face font-lock-function-name-face) 321 323 (fontified t face font-lock-function-name-face) 323 324 (fontified t face font-lock-function-name-face) 324 325 (fontified t face font-lock-function-name-face) 325 326 (fontified t face (rainbow-delimiters-depth-3-face)) 326 327 (fontified t face (rainbow-delimiters-depth-3-face)) 327 328 (fontified t) 328 329 (fontified t face (rainbow-delimiters-depth-3-face)) 329 330 (fontified t) 330 335 (fontified t) 335 336 (fontified t face font-lock-keyword-face) 336 337 (fontified t face font-lock-keyword-face) 337 338 (fontified t face font-lock-keyword-face) 338 339 (fontified t face font-lock-keyword-face) 339 340 (fontified t face font-lock-keyword-face) 340 341 (fontified t face font-lock-keyword-face) 341 342 (fontified t) 342 343 (fontified t) 343 344 (fontified t) 344 345 (fontified t) 345 346 (fontified t) 346 347 (fontified t) 347 348 (fontified t) 348 349 (fontified t) 349 350 (fontified t) 350 351 (fontified t) 351 352 (fontified t) 352 353 (fontified t) 353 354 (fontified t) 354 355 (fontified t face (rainbow-delimiters-depth-3-face)) 355 356 (fontified t) 356 357 (fontified t) 357 358 (fontified t face font-lock-keyword-face) 358 359 (fontified t face font-lock-keyword-face) 359 360 (fontified t face font-lock-keyword-face) 360 361 (fontified t face font-lock-keyword-face) 361 362 (fontified t face font-lock-keyword-face) 362 363 (fontified t face font-lock-keyword-face) 363 364 (fontified t) 364 365 (fontified t face font-lock-type-face) 365 366 (fontified t face font-lock-type-face) 366 367 (fontified t face font-lock-type-face) 367 368 (fontified t face font-lock-type-face) 368 369 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 369 370 (fontified t face font-lock-type-face) 370 371 (category c->-as-paren-syntax fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 371 372 (fontified t) 372 373 (fontified t face font-lock-function-name-face) 373 374 (fontified t face font-lock-function-name-face) 374 375 (fontified t face font-lock-function-name-face) 375 376 (fontified t face font-lock-function-name-face) 376 377 (fontified t face font-lock-function-name-face) 377 378 (fontified t face font-lock-function-name-face) 378 379 (fontified t face font-lock-function-name-face) 379 380 (fontified t face font-lock-function-name-face) 380 381 (fontified t face font-lock-function-name-face) 381 382 (fontified t face font-lock-function-name-face) 382 383 (fontified t face (rainbow-delimiters-depth-3-face)) 383 384 (fontified t face (rainbow-delimiters-depth-3-face)) 384 385 (fontified t) 385 386 (fontified t face (rainbow-delimiters-depth-3-face)) 386 387 (fontified t) 387 392 (fontified t) 392 393 (fontified t face font-lock-keyword-face) 393 394 (fontified t face font-lock-keyword-face) 394 395 (fontified t face font-lock-keyword-face) 395 396 (fontified t face font-lock-keyword-face) 396 397 (fontified t face font-lock-keyword-face) 397 398 (fontified t face font-lock-keyword-face) 398 399 (fontified t) 399 400 (fontified t) 400 401 (fontified t) 401 402 (fontified t) 402 403 (fontified t) 403 404 (fontified t) 404 405 (fontified t) 405 406 (fontified t) 406 407 (fontified t) 407 408 (fontified t) 408 409 (fontified t) 409 410 (fontified t face (rainbow-delimiters-depth-3-face)) 410 411 (fontified t) 411 415 (fontified t) 415 416 (fontified t face (rainbow-delimiters-depth-2-face)) 416 417 (fontified t)) . 32) (undo-tree-id1376 . -26) (undo-tree-id1377 . -416) (undo-tree-id1378 . -26) (undo-tree-id1379 . 406) (undo-tree-id1380 . -416) (undo-tree-id1381 . -10) (undo-tree-id1382 . -416) (undo-tree-id1383 . -28) (undo-tree-id1384 . -410) (undo-tree-id1385 . -27) (undo-tree-id1386 . -416) (undo-tree-id1387 . -39) (undo-tree-id1388 . -47) (undo-tree-id1389 . -143) (undo-tree-id1390 . -144) (undo-tree-id1391 . -147) (undo-tree-id1392 . -155) (undo-tree-id1393 . -165) (undo-tree-id1394 . -189) (undo-tree-id1395 . 406) (undo-tree-id1396 . -10) (undo-tree-id1397 . -416) 448) nil (25221 56521 779683 841000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -32) (undo-tree-id1442 . -1) 33 (32 . 33) (t 25221 56521 804354 472000)) nil (25221 56533 351089 709000) 0 nil])
([nil nil ((nil rear-nonsticky nil 40 . 41) (#("
" 0 1 (fontified nil)) . -453) (36 . 454) 32) nil (25221 56533 351082 128000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 32) (undo-tree-id1400 . -3) (undo-tree-id1401 . 5) (undo-tree-id1402 . 5) (undo-tree-id1403 . -5) (undo-tree-id1404 . 5) (undo-tree-id1405 . -4) (undo-tree-id1406 . -3) (undo-tree-id1407 . -3) (undo-tree-id1408 . -3) (undo-tree-id1409 . -3) (undo-tree-id1410 . -3) (undo-tree-id1411 . -3) (undo-tree-id1412 . -3) (undo-tree-id1413 . -3) (undo-tree-id1414 . -3) (undo-tree-id1415 . -3) (undo-tree-id1416 . -3) (undo-tree-id1417 . -3) (undo-tree-id1418 . -3) (undo-tree-id1419 . -3) (undo-tree-id1420 . -3) (undo-tree-id1421 . -3) (undo-tree-id1422 . -3) (undo-tree-id1423 . -3) (undo-tree-id1424 . -3) (undo-tree-id1425 . -3) (undo-tree-id1426 . -3) (undo-tree-id1427 . -3) (undo-tree-id1428 . -3) (undo-tree-id1429 . -3) (undo-tree-id1430 . -3) (undo-tree-id1431 . -3) (undo-tree-id1432 . -3) (undo-tree-id1433 . -3) (undo-tree-id1434 . -3) (undo-tree-id1435 . -3) (undo-tree-id1436 . -3) (undo-tree-id1437 . -3) (undo-tree-id1438 . -3) (undo-tree-id1439 . -3) (undo-tree-id1440 . -3) (undo-tree-id1441 . -3) 35) nil (25221 56533 351066 927000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face font-lock-keyword-face)) . 38) (t 25221 56533 372477 518000)) nil (25221 56544 19227 629000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t face font-lock-type-face)) . 38)) nil (25221 56544 19223 400000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-type-face)) . 38)) nil (25221 56544 19219 725000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face font-lock-type-face)) . 38)) nil (25221 56544 19216 287000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t c-type c-decl-type-start face font-lock-type-face)) . 38)) nil (25221 56544 19211 410000) 0 nil])
([nil nil ((38 . 45)) nil (25221 56544 19199 463000) 0 nil])
([nil nil ((#("elemento" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . -215) (undo-tree-id2423 . -8) (undo-tree-id2424 . -8) (undo-tree-id2425 . -8) (undo-tree-id2426 . -8) (undo-tree-id2427 . -8) (undo-tree-id2428 . -8) (undo-tree-id2429 . -8) (undo-tree-id2430 . -8) (undo-tree-id2431 . -8) (undo-tree-id2432 . -8) (undo-tree-id2433 . -8) (undo-tree-id2434 . -8) (undo-tree-id2435 . -8) (undo-tree-id2436 . -8) (undo-tree-id2437 . -8) (undo-tree-id2438 . -8) (undo-tree-id2439 . -8) (undo-tree-id2440 . -8) (undo-tree-id2441 . -8) (undo-tree-id2442 . -8) (undo-tree-id2443 . -8) (undo-tree-id2444 . -8) (undo-tree-id2445 . -8) (undo-tree-id2446 . -8) (undo-tree-id2447 . -8) (undo-tree-id2448 . -8) (undo-tree-id2449 . -8) (undo-tree-id2450 . -8) (undo-tree-id2451 . -8) 223 (t 25221 56544 45591 46000)) nil (25221 56778 345714 867000) 0 nil])
([nil nil ((#("elemento = " 0 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t)) . -204) (undo-tree-id2353 . -11) (undo-tree-id2354 . -11) (undo-tree-id2355 . -11) (undo-tree-id2356 . -11) (undo-tree-id2357 . -11) (undo-tree-id2358 . -11) (undo-tree-id2359 . -11) (undo-tree-id2360 . -11) (undo-tree-id2361 . -11) (undo-tree-id2362 . -11) (undo-tree-id2363 . -11) (undo-tree-id2364 . -11) (undo-tree-id2365 . -11) (undo-tree-id2366 . -11) (undo-tree-id2367 . -11) (undo-tree-id2368 . -11) (undo-tree-id2369 . -11) (undo-tree-id2370 . -11) (undo-tree-id2371 . -11) (undo-tree-id2372 . -11) (undo-tree-id2373 . -11) (undo-tree-id2374 . -11) (undo-tree-id2375 . -11) (undo-tree-id2376 . -11) (undo-tree-id2377 . -11) (undo-tree-id2378 . -11) (undo-tree-id2379 . -11) (undo-tree-id2380 . -11) (undo-tree-id2381 . -11) (undo-tree-id2382 . -11) (undo-tree-id2383 . -11) (undo-tree-id2384 . -11) (undo-tree-id2385 . -11) (undo-tree-id2386 . -11) (undo-tree-id2387 . -11) (undo-tree-id2388 . -11) (undo-tree-id2389 . -11) (undo-tree-id2390 . -11) (undo-tree-id2391 . -11) (undo-tree-id2392 . -11) (undo-tree-id2393 . -11) (undo-tree-id2394 . -11) (undo-tree-id2395 . -11) (undo-tree-id2396 . -11) (undo-tree-id2397 . -11) (undo-tree-id2398 . -11) (undo-tree-id2399 . -11) (undo-tree-id2400 . -11) (undo-tree-id2401 . -11) (undo-tree-id2402 . -11) (undo-tree-id2403 . -11) (undo-tree-id2404 . -11) (undo-tree-id2405 . -11) (undo-tree-id2406 . -11) (undo-tree-id2407 . -11) (undo-tree-id2408 . -11) (undo-tree-id2409 . -11) (undo-tree-id2410 . -11) (undo-tree-id2411 . -11) (undo-tree-id2412 . -11) (undo-tree-id2413 . -11) (undo-tree-id2414 . -11) (undo-tree-id2415 . -11) (undo-tree-id2416 . -11) (undo-tree-id2417 . -11) (undo-tree-id2418 . -11) (undo-tree-id2419 . -11) (undo-tree-id2420 . -11) (undo-tree-id2421 . -11) (undo-tree-id2422 . -11) 215) nil (25221 56778 345654 110000) 0 nil])
([nil nil ((#("this." 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t)) . -199) (undo-tree-id2268 . -5) (undo-tree-id2269 . -5) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -5) (undo-tree-id2278 . -5) (undo-tree-id2279 . -5) (undo-tree-id2280 . -5) (undo-tree-id2281 . -5) (undo-tree-id2282 . -5) (undo-tree-id2283 . -5) (undo-tree-id2284 . -5) (undo-tree-id2285 . -5) (undo-tree-id2286 . -5) (undo-tree-id2287 . -5) (undo-tree-id2288 . -5) (undo-tree-id2289 . -5) (undo-tree-id2290 . -5) (undo-tree-id2291 . -5) (undo-tree-id2292 . -5) (undo-tree-id2293 . -5) (undo-tree-id2294 . -5) (undo-tree-id2295 . -5) (undo-tree-id2296 . -5) (undo-tree-id2297 . -5) (undo-tree-id2298 . -5) (undo-tree-id2299 . -5) (undo-tree-id2300 . -5) (undo-tree-id2301 . -5) (undo-tree-id2302 . -5) (undo-tree-id2303 . -5) (undo-tree-id2304 . -5) (undo-tree-id2305 . -5) (undo-tree-id2306 . -5) (undo-tree-id2307 . -5) (undo-tree-id2308 . -5) (undo-tree-id2309 . -5) (undo-tree-id2310 . -5) (undo-tree-id2311 . -5) (undo-tree-id2312 . -5) (undo-tree-id2313 . -5) (undo-tree-id2314 . -5) (undo-tree-id2315 . -5) (undo-tree-id2316 . -5) (undo-tree-id2317 . -5) (undo-tree-id2318 . -5) (undo-tree-id2319 . -5) (undo-tree-id2320 . -5) (undo-tree-id2321 . -5) (undo-tree-id2322 . -5) (undo-tree-id2323 . -5) (undo-tree-id2324 . -5) (undo-tree-id2325 . -5) (undo-tree-id2326 . -5) (undo-tree-id2327 . -5) (undo-tree-id2328 . -5) (undo-tree-id2329 . -5) (undo-tree-id2330 . -5) (undo-tree-id2331 . -5) (undo-tree-id2332 . -5) (undo-tree-id2333 . -5) (undo-tree-id2334 . -5) (undo-tree-id2335 . -5) (undo-tree-id2336 . -5) (undo-tree-id2337 . -5) (undo-tree-id2338 . -5) (undo-tree-id2339 . -5) (undo-tree-id2340 . -5) (undo-tree-id2341 . -5) (undo-tree-id2342 . -5) (undo-tree-id2343 . -5) (undo-tree-id2344 . -5) (undo-tree-id2345 . -5) (undo-tree-id2346 . -5) (undo-tree-id2347 . -5) (undo-tree-id2348 . -5) (undo-tree-id2349 . -5) (undo-tree-id2350 . -5) (undo-tree-id2351 . -5) (undo-tree-id2352 . -5) 204) nil (25221 56778 345524 784000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -199) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) 200) nil (25221 56778 345367 791000) 0 nil])
([nil nil ((#("elemento) {
	     
	}" 0 8 (fontified t face font-lock-variable-name-face) 8 9 (fontified t face (rainbow-delimiters-depth-3-face)) 9 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-3-face)) 11 12 (fontified t) 12 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-3-face))) . -182) (undo-tree-id2107 . -21) (undo-tree-id2108 . -7) (undo-tree-id2109 . -17) (undo-tree-id2110 . -17) (undo-tree-id2111 . -17) (undo-tree-id2112 . -17) (undo-tree-id2113 . -17) (undo-tree-id2114 . -17) (undo-tree-id2115 . -17) (undo-tree-id2116 . -21) (undo-tree-id2117 . -21) (undo-tree-id2118 . -21) (undo-tree-id2119 . -21) (undo-tree-id2120 . -21) (undo-tree-id2121 . -21) (undo-tree-id2122 . -21) (undo-tree-id2123 . -21) (undo-tree-id2124 . -21) (undo-tree-id2125 . -21) (undo-tree-id2126 . -21) (undo-tree-id2127 . -21) (undo-tree-id2128 . -21) (undo-tree-id2129 . -21) (undo-tree-id2130 . -21) (undo-tree-id2131 . -17) (undo-tree-id2132 . -17) (undo-tree-id2133 . -17) (undo-tree-id2134 . -17) (undo-tree-id2135 . -17) (undo-tree-id2136 . -17) (undo-tree-id2137 . -17) (undo-tree-id2138 . -17) (undo-tree-id2139 . -17) (undo-tree-id2140 . -17) (undo-tree-id2141 . -17) (undo-tree-id2142 . -17) (undo-tree-id2143 . -17) (undo-tree-id2144 . -17) (undo-tree-id2145 . -17) (undo-tree-id2146 . -17) (undo-tree-id2147 . -17) (undo-tree-id2148 . -17) (undo-tree-id2149 . -17) (undo-tree-id2150 . -17) (undo-tree-id2151 . -17) (undo-tree-id2152 . -17) (undo-tree-id2153 . -17) (undo-tree-id2154 . -17) (undo-tree-id2155 . -17) (undo-tree-id2156 . -17) (undo-tree-id2157 . -17) (undo-tree-id2158 . -17) (undo-tree-id2159 . -17) (undo-tree-id2160 . -17) (undo-tree-id2161 . -17) (undo-tree-id2162 . -17) (undo-tree-id2163 . -17) (undo-tree-id2164 . -17) (undo-tree-id2165 . -17) (undo-tree-id2166 . -17) (undo-tree-id2167 . -17) (undo-tree-id2168 . -17) (undo-tree-id2169 . -17) (undo-tree-id2170 . -17) (undo-tree-id2171 . -17) (undo-tree-id2172 . -17) (undo-tree-id2173 . -17) (undo-tree-id2174 . -17) (undo-tree-id2175 . -17) (undo-tree-id2176 . -17) (undo-tree-id2177 . -17) (undo-tree-id2178 . -17) (undo-tree-id2179 . -17) (undo-tree-id2180 . -17) (undo-tree-id2181 . -17) (undo-tree-id2182 . -17) (undo-tree-id2183 . -17) (undo-tree-id2184 . -17) (undo-tree-id2185 . -17) (undo-tree-id2186 . -17) (undo-tree-id2187 . -17) (undo-tree-id2188 . -17) (undo-tree-id2189 . -17) (undo-tree-id2190 . -17) (undo-tree-id2191 . -17) (undo-tree-id2192 . -17) (undo-tree-id2193 . -17) (undo-tree-id2194 . -17) (undo-tree-id2195 . -17) (undo-tree-id2196 . -17) (undo-tree-id2197 . -17) (undo-tree-id2198 . -17) (undo-tree-id2199 . -17) (undo-tree-id2200 . -17) (undo-tree-id2201 . -17) (undo-tree-id2202 . -17) (undo-tree-id2203 . -17) (undo-tree-id2204 . -17) (undo-tree-id2205 . -17) (undo-tree-id2206 . -17) (undo-tree-id2207 . -17) (undo-tree-id2208 . -17) (undo-tree-id2209 . -17) (undo-tree-id2210 . -17) (undo-tree-id2211 . -17) (undo-tree-id2212 . -17) (undo-tree-id2213 . -17) (undo-tree-id2214 . -17) (undo-tree-id2215 . -17) (undo-tree-id2216 . -17) (undo-tree-id2217 . -17) (undo-tree-id2218 . -17) (undo-tree-id2219 . -17) (undo-tree-id2220 . -17) (undo-tree-id2221 . -17) (undo-tree-id2222 . -17) (undo-tree-id2223 . -17) (undo-tree-id2224 . -17) (undo-tree-id2225 . -17) (undo-tree-id2226 . -17) (undo-tree-id2227 . -17) (undo-tree-id2228 . -17) (undo-tree-id2229 . -17) (undo-tree-id2230 . -17) (undo-tree-id2231 . -17) (undo-tree-id2232 . -17) (undo-tree-id2233 . -17) (undo-tree-id2234 . -17) (undo-tree-id2235 . -17) (undo-tree-id2236 . -17) (undo-tree-id2237 . -19) (undo-tree-id2238 . -21) (undo-tree-id2239 . -21) (undo-tree-id2240 . -21) (undo-tree-id2241 . -21) (undo-tree-id2242 . -21) (undo-tree-id2243 . -21) (undo-tree-id2244 . -21) (undo-tree-id2245 . -21) (undo-tree-id2246 . 1) (undo-tree-id2247 . -21) (undo-tree-id2248 . 11) (undo-tree-id2249 . -11) (undo-tree-id2250 . -21) (undo-tree-id2251 . -21) (undo-tree-id2252 . -21) (undo-tree-id2253 . -21) (undo-tree-id2254 . -21) (undo-tree-id2255 . -21) (undo-tree-id2256 . -21) (undo-tree-id2257 . -21) 203) nil (25221 56778 345299 307000) 0 nil])
([nil nil ((#("E " 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t)) . -180) (undo-tree-id1952 . -2) (undo-tree-id1953 . -1) (undo-tree-id1954 . -2) (undo-tree-id1955 . -2) (undo-tree-id1956 . -2) (undo-tree-id1957 . -2) (undo-tree-id1958 . -2) (undo-tree-id1959 . -2) (undo-tree-id1960 . -2) (undo-tree-id1961 . -2) (undo-tree-id1962 . -2) (undo-tree-id1963 . -2) (undo-tree-id1964 . -2) (undo-tree-id1965 . -2) (undo-tree-id1966 . -2) (undo-tree-id1967 . -2) (undo-tree-id1968 . -2) (undo-tree-id1969 . -2) (undo-tree-id1970 . -2) (undo-tree-id1971 . -2) (undo-tree-id1972 . -2) (undo-tree-id1973 . -2) (undo-tree-id1974 . -2) (undo-tree-id1975 . -2) (undo-tree-id1976 . -2) (undo-tree-id1977 . -2) (undo-tree-id1978 . -2) (undo-tree-id1979 . -2) (undo-tree-id1980 . -2) (undo-tree-id1981 . -2) (undo-tree-id1982 . -2) (undo-tree-id1983 . -2) (undo-tree-id1984 . -2) (undo-tree-id1985 . -2) (undo-tree-id1986 . -2) (undo-tree-id1987 . -2) (undo-tree-id1988 . -2) (undo-tree-id1989 . -2) (undo-tree-id1990 . -2) (undo-tree-id1991 . -2) (undo-tree-id1992 . -2) (undo-tree-id1993 . -2) (undo-tree-id1994 . -2) (undo-tree-id1995 . -2) (undo-tree-id1996 . -2) (undo-tree-id1997 . -2) (undo-tree-id1998 . -2) (undo-tree-id1999 . -2) (undo-tree-id2000 . -2) (undo-tree-id2001 . -2) (undo-tree-id2002 . -2) (undo-tree-id2003 . -2) (undo-tree-id2004 . -2) (undo-tree-id2005 . -2) (undo-tree-id2006 . -2) (undo-tree-id2007 . -2) (undo-tree-id2008 . -2) (undo-tree-id2009 . -2) (undo-tree-id2010 . -2) (undo-tree-id2011 . -2) (undo-tree-id2012 . -2) (undo-tree-id2013 . -2) (undo-tree-id2014 . -2) (undo-tree-id2015 . -2) (undo-tree-id2016 . -2) (undo-tree-id2017 . -2) (undo-tree-id2018 . -2) (undo-tree-id2019 . -2) (undo-tree-id2020 . -2) (undo-tree-id2021 . -2) (undo-tree-id2022 . -2) (undo-tree-id2023 . -2) (undo-tree-id2024 . -2) (undo-tree-id2025 . -2) (undo-tree-id2026 . -2) (undo-tree-id2027 . -2) (undo-tree-id2028 . -2) (undo-tree-id2029 . -2) (undo-tree-id2030 . -2) (undo-tree-id2031 . -2) (undo-tree-id2032 . -2) (undo-tree-id2033 . -2) (undo-tree-id2034 . -2) (undo-tree-id2035 . -2) (undo-tree-id2036 . -2) (undo-tree-id2037 . -2) (undo-tree-id2038 . -2) (undo-tree-id2039 . -2) (undo-tree-id2040 . -2) (undo-tree-id2041 . -2) (undo-tree-id2042 . -2) (undo-tree-id2043 . -2) (undo-tree-id2044 . -2) (undo-tree-id2045 . -2) (undo-tree-id2046 . -2) (undo-tree-id2047 . -2) (undo-tree-id2048 . -2) (undo-tree-id2049 . -2) (undo-tree-id2050 . -2) (undo-tree-id2051 . -2) (undo-tree-id2052 . -2) (undo-tree-id2053 . -2) (undo-tree-id2054 . -2) (undo-tree-id2055 . -2) (undo-tree-id2056 . -2) (undo-tree-id2057 . -2) (undo-tree-id2058 . -2) (undo-tree-id2059 . -2) (undo-tree-id2060 . -2) (undo-tree-id2061 . -2) (undo-tree-id2062 . -2) (undo-tree-id2063 . -2) (undo-tree-id2064 . -2) (undo-tree-id2065 . -2) (undo-tree-id2066 . -2) (undo-tree-id2067 . -2) (undo-tree-id2068 . -2) (undo-tree-id2069 . -2) (undo-tree-id2070 . -2) (undo-tree-id2071 . -2) (undo-tree-id2072 . -2) (undo-tree-id2073 . -2) (undo-tree-id2074 . -2) (undo-tree-id2075 . -2) (undo-tree-id2076 . -2) (undo-tree-id2077 . -2) (undo-tree-id2078 . -2) (undo-tree-id2079 . -2) (undo-tree-id2080 . -2) (undo-tree-id2081 . -2) (undo-tree-id2082 . -2) (undo-tree-id2083 . -2) (undo-tree-id2084 . -2) (undo-tree-id2085 . -2) (undo-tree-id2086 . -2) (undo-tree-id2087 . -2) (undo-tree-id2088 . -2) (undo-tree-id2089 . -2) (undo-tree-id2090 . -2) (undo-tree-id2091 . -2) (undo-tree-id2092 . -2) (undo-tree-id2093 . -2) (undo-tree-id2094 . -2) (undo-tree-id2095 . -2) (undo-tree-id2096 . -2) (undo-tree-id2097 . -2) (undo-tree-id2098 . -2) (undo-tree-id2099 . -2) (undo-tree-id2100 . -2) (undo-tree-id2101 . -2) (undo-tree-id2102 . -2) (undo-tree-id2103 . -2) (undo-tree-id2104 . -2) (undo-tree-id2105 . -2) (undo-tree-id2106 . -2) 182) nil (25221 56778 344876 622000) 0 nil])
([nil nil ((#("E> (" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 2 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-3-face))) . -176) (undo-tree-id1789 . -4) (undo-tree-id1790 . -1) (undo-tree-id1791 . -2) (undo-tree-id1792 . -4) (undo-tree-id1793 . -4) (undo-tree-id1794 . -4) (undo-tree-id1795 . -4) (undo-tree-id1796 . -4) (undo-tree-id1797 . -4) (undo-tree-id1798 . -4) (undo-tree-id1799 . -4) (undo-tree-id1800 . -4) (undo-tree-id1801 . -4) (undo-tree-id1802 . -4) (undo-tree-id1803 . -4) (undo-tree-id1804 . -4) (undo-tree-id1805 . -4) (undo-tree-id1806 . -4) (undo-tree-id1807 . -4) (undo-tree-id1808 . -4) (undo-tree-id1809 . -4) (undo-tree-id1810 . -4) (undo-tree-id1811 . -4) (undo-tree-id1812 . -4) (undo-tree-id1813 . -4) (undo-tree-id1814 . -4) (undo-tree-id1815 . -4) (undo-tree-id1816 . -4) (undo-tree-id1817 . -4) (undo-tree-id1818 . -4) (undo-tree-id1819 . -4) (undo-tree-id1820 . -4) (undo-tree-id1821 . -4) (undo-tree-id1822 . -4) (undo-tree-id1823 . -4) (undo-tree-id1824 . -4) (undo-tree-id1825 . -4) (undo-tree-id1826 . -4) (undo-tree-id1827 . -4) (undo-tree-id1828 . -4) (undo-tree-id1829 . -4) (undo-tree-id1830 . -4) (undo-tree-id1831 . -4) (undo-tree-id1832 . -4) (undo-tree-id1833 . -4) (undo-tree-id1834 . -4) (undo-tree-id1835 . -4) (undo-tree-id1836 . -4) (undo-tree-id1837 . -4) (undo-tree-id1838 . -4) (undo-tree-id1839 . -4) (undo-tree-id1840 . -4) (undo-tree-id1841 . -4) (undo-tree-id1842 . -4) (undo-tree-id1843 . -4) (undo-tree-id1844 . -4) (undo-tree-id1845 . -4) (undo-tree-id1846 . -4) (undo-tree-id1847 . -4) (undo-tree-id1848 . -4) (undo-tree-id1849 . -4) (undo-tree-id1850 . -4) (undo-tree-id1851 . -4) (undo-tree-id1852 . -4) (undo-tree-id1853 . -4) (undo-tree-id1854 . -4) (undo-tree-id1855 . -4) (undo-tree-id1856 . -4) (undo-tree-id1857 . -4) (undo-tree-id1858 . -4) (undo-tree-id1859 . -4) (undo-tree-id1860 . -4) (undo-tree-id1861 . -4) (undo-tree-id1862 . -4) (undo-tree-id1863 . -4) (undo-tree-id1864 . -4) (undo-tree-id1865 . -4) (undo-tree-id1866 . -4) (undo-tree-id1867 . -4) (undo-tree-id1868 . -4) (undo-tree-id1869 . -4) (undo-tree-id1870 . -4) (undo-tree-id1871 . -4) (undo-tree-id1872 . -4) (undo-tree-id1873 . -4) (undo-tree-id1874 . -4) (undo-tree-id1875 . -4) (undo-tree-id1876 . -4) (undo-tree-id1877 . -4) (undo-tree-id1878 . -4) (undo-tree-id1879 . -4) (undo-tree-id1880 . -4) (undo-tree-id1881 . -4) (undo-tree-id1882 . -4) (undo-tree-id1883 . -4) (undo-tree-id1884 . -4) (undo-tree-id1885 . -4) (undo-tree-id1886 . -4) (undo-tree-id1887 . -4) (undo-tree-id1888 . -4) (undo-tree-id1889 . -4) (undo-tree-id1890 . -4) (undo-tree-id1891 . -4) (undo-tree-id1892 . -4) (undo-tree-id1893 . -4) (undo-tree-id1894 . -4) (undo-tree-id1895 . -4) (undo-tree-id1896 . -4) (undo-tree-id1897 . -4) (undo-tree-id1898 . -4) (undo-tree-id1899 . -4) (undo-tree-id1900 . -4) (undo-tree-id1901 . -4) (undo-tree-id1902 . -4) (undo-tree-id1903 . -4) (undo-tree-id1904 . -4) (undo-tree-id1905 . -4) (undo-tree-id1906 . -4) (undo-tree-id1907 . -4) (undo-tree-id1908 . -4) (undo-tree-id1909 . -4) (undo-tree-id1910 . -4) (undo-tree-id1911 . -4) (undo-tree-id1912 . -4) (undo-tree-id1913 . -4) (undo-tree-id1914 . -4) (undo-tree-id1915 . -4) (undo-tree-id1916 . -4) (undo-tree-id1917 . -4) (undo-tree-id1918 . -4) (undo-tree-id1919 . -4) (undo-tree-id1920 . -4) (undo-tree-id1921 . -4) (undo-tree-id1922 . -4) (undo-tree-id1923 . -4) (undo-tree-id1924 . -4) (undo-tree-id1925 . -4) (undo-tree-id1926 . -4) (undo-tree-id1927 . -4) (undo-tree-id1928 . -4) (undo-tree-id1929 . -4) (undo-tree-id1930 . -4) (undo-tree-id1931 . -4) (undo-tree-id1932 . -4) (undo-tree-id1933 . -4) (undo-tree-id1934 . -4) (undo-tree-id1935 . -4) (undo-tree-id1936 . -4) (undo-tree-id1937 . -4) (undo-tree-id1938 . -4) (undo-tree-id1939 . -4) (undo-tree-id1940 . -4) (undo-tree-id1941 . -4) (undo-tree-id1942 . -4) (undo-tree-id1943 . -4) (undo-tree-id1944 . -4) (undo-tree-id1945 . -4) (undo-tree-id1946 . -4) (undo-tree-id1947 . -4) (undo-tree-id1948 . -4) (undo-tree-id1949 . -4) (undo-tree-id1950 . -4) (undo-tree-id1951 . -4) 180) nil (25221 56778 343998 329000) 0 nil])
([nil nil ((#("Nodo<" 0 3 (fontified t face font-lock-type-face) 3 4 (fontified t c-type c-decl-id-start face font-lock-type-face) 4 5 (fontified t)) . -171) (undo-tree-id1620 . -5) (undo-tree-id1621 . -5) (undo-tree-id1622 . -5) (undo-tree-id1623 . -5) (undo-tree-id1624 . -5) (undo-tree-id1625 . -5) (undo-tree-id1626 . -5) (undo-tree-id1627 . -5) (undo-tree-id1628 . -5) (undo-tree-id1629 . -5) (undo-tree-id1630 . -5) (undo-tree-id1631 . -5) (undo-tree-id1632 . -5) (undo-tree-id1633 . -5) (undo-tree-id1634 . -5) (undo-tree-id1635 . -5) (undo-tree-id1636 . -5) (undo-tree-id1637 . -5) (undo-tree-id1638 . -5) (undo-tree-id1639 . -5) (undo-tree-id1640 . -5) (undo-tree-id1641 . -5) (undo-tree-id1642 . -5) (undo-tree-id1643 . -5) (undo-tree-id1644 . -5) (undo-tree-id1645 . -5) (undo-tree-id1646 . -5) (undo-tree-id1647 . -5) (undo-tree-id1648 . -5) (undo-tree-id1649 . -5) (undo-tree-id1650 . -5) (undo-tree-id1651 . -5) (undo-tree-id1652 . -5) (undo-tree-id1653 . -5) (undo-tree-id1654 . -5) (undo-tree-id1655 . -5) (undo-tree-id1656 . -5) (undo-tree-id1657 . -5) (undo-tree-id1658 . -5) (undo-tree-id1659 . -5) (undo-tree-id1660 . -5) (undo-tree-id1661 . -5) (undo-tree-id1662 . -5) (undo-tree-id1663 . -5) (undo-tree-id1664 . -5) (undo-tree-id1665 . -5) (undo-tree-id1666 . -5) (undo-tree-id1667 . -5) (undo-tree-id1668 . -5) (undo-tree-id1669 . -5) (undo-tree-id1670 . -5) (undo-tree-id1671 . -5) (undo-tree-id1672 . -5) (undo-tree-id1673 . -5) (undo-tree-id1674 . -5) (undo-tree-id1675 . -5) (undo-tree-id1676 . -5) (undo-tree-id1677 . -5) (undo-tree-id1678 . -5) (undo-tree-id1679 . -5) (undo-tree-id1680 . -5) (undo-tree-id1681 . -5) (undo-tree-id1682 . -5) (undo-tree-id1683 . -5) (undo-tree-id1684 . -5) (undo-tree-id1685 . -5) (undo-tree-id1686 . -5) (undo-tree-id1687 . -5) (undo-tree-id1688 . -5) (undo-tree-id1689 . -5) (undo-tree-id1690 . -5) (undo-tree-id1691 . -5) (undo-tree-id1692 . -5) (undo-tree-id1693 . -5) (undo-tree-id1694 . -5) (undo-tree-id1695 . -5) (undo-tree-id1696 . -5) (undo-tree-id1697 . -5) (undo-tree-id1698 . -5) (undo-tree-id1699 . -5) (undo-tree-id1700 . -5) (undo-tree-id1701 . -5) (undo-tree-id1702 . -5) (undo-tree-id1703 . -5) (undo-tree-id1704 . -5) (undo-tree-id1705 . -5) (undo-tree-id1706 . -5) (undo-tree-id1707 . -5) (undo-tree-id1708 . -5) (undo-tree-id1709 . -5) (undo-tree-id1710 . -5) (undo-tree-id1711 . -5) (undo-tree-id1712 . -5) (undo-tree-id1713 . -5) (undo-tree-id1714 . -5) (undo-tree-id1715 . -5) (undo-tree-id1716 . -5) (undo-tree-id1717 . -5) (undo-tree-id1718 . -5) (undo-tree-id1719 . -5) (undo-tree-id1720 . -5) (undo-tree-id1721 . -5) (undo-tree-id1722 . -5) (undo-tree-id1723 . -5) (undo-tree-id1724 . -5) (undo-tree-id1725 . -5) (undo-tree-id1726 . -5) (undo-tree-id1727 . -5) (undo-tree-id1728 . -5) (undo-tree-id1729 . -5) (undo-tree-id1730 . -5) (undo-tree-id1731 . -5) (undo-tree-id1732 . -5) (undo-tree-id1733 . -5) (undo-tree-id1734 . -5) (undo-tree-id1735 . -5) (undo-tree-id1736 . -5) (undo-tree-id1737 . -5) (undo-tree-id1738 . -5) (undo-tree-id1739 . -5) (undo-tree-id1740 . -5) (undo-tree-id1741 . -5) (undo-tree-id1742 . -5) (undo-tree-id1743 . -5) (undo-tree-id1744 . -5) (undo-tree-id1745 . -5) (undo-tree-id1746 . -5) (undo-tree-id1747 . -5) (undo-tree-id1748 . -5) (undo-tree-id1749 . -5) (undo-tree-id1750 . -5) (undo-tree-id1751 . -5) (undo-tree-id1752 . -5) (undo-tree-id1753 . -5) (undo-tree-id1754 . -5) (undo-tree-id1755 . -5) (undo-tree-id1756 . -5) (undo-tree-id1757 . -5) (undo-tree-id1758 . -5) (undo-tree-id1759 . -5) (undo-tree-id1760 . -5) (undo-tree-id1761 . -5) (undo-tree-id1762 . -5) (undo-tree-id1763 . -5) (undo-tree-id1764 . -5) (undo-tree-id1765 . -5) (undo-tree-id1766 . -5) (undo-tree-id1767 . -5) (undo-tree-id1768 . -5) (undo-tree-id1769 . -5) (undo-tree-id1770 . -5) (undo-tree-id1771 . -5) (undo-tree-id1772 . -5) (undo-tree-id1773 . -5) (undo-tree-id1774 . -5) (undo-tree-id1775 . -5) (undo-tree-id1776 . -5) (undo-tree-id1777 . -5) (undo-tree-id1778 . -5) (undo-tree-id1779 . -5) (undo-tree-id1780 . -5) (undo-tree-id1781 . -5) (undo-tree-id1782 . -5) (undo-tree-id1783 . -5) (undo-tree-id1784 . -5) (undo-tree-id1785 . -5) (undo-tree-id1786 . -5) (undo-tree-id1787 . -5) (undo-tree-id1788 . -5) 176) nil (25221 56778 343697 233000) 0 nil])
([nil nil ((#("public " 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 6 7 (fontified t)) . -164) (undo-tree-id1443 . -7) (undo-tree-id1444 . -7) (undo-tree-id1445 . -7) (undo-tree-id1446 . -7) (undo-tree-id1447 . -7) (undo-tree-id1448 . -7) (undo-tree-id1449 . -7) (undo-tree-id1450 . -7) (undo-tree-id1451 . -7) (undo-tree-id1452 . -7) (undo-tree-id1453 . -7) (undo-tree-id1454 . -7) (undo-tree-id1455 . -7) (undo-tree-id1456 . -7) (undo-tree-id1457 . -7) (undo-tree-id1458 . -7) (undo-tree-id1459 . -7) (undo-tree-id1460 . -7) (undo-tree-id1461 . -7) (undo-tree-id1462 . -7) (undo-tree-id1463 . -7) (undo-tree-id1464 . -7) (undo-tree-id1465 . -7) (undo-tree-id1466 . -7) (undo-tree-id1467 . -7) (undo-tree-id1468 . -7) (undo-tree-id1469 . -7) (undo-tree-id1470 . -7) (undo-tree-id1471 . -7) (undo-tree-id1472 . -7) (undo-tree-id1473 . -7) (undo-tree-id1474 . -7) (undo-tree-id1475 . -7) (undo-tree-id1476 . -7) (undo-tree-id1477 . -7) (undo-tree-id1478 . -7) (undo-tree-id1479 . -7) (undo-tree-id1480 . -7) (undo-tree-id1481 . -7) (undo-tree-id1482 . -7) (undo-tree-id1483 . -7) (undo-tree-id1484 . -7) (undo-tree-id1485 . -7) (undo-tree-id1486 . -7) (undo-tree-id1487 . -7) (undo-tree-id1488 . -7) (undo-tree-id1489 . -7) (undo-tree-id1490 . -7) (undo-tree-id1491 . -7) (undo-tree-id1492 . -7) (undo-tree-id1493 . -7) (undo-tree-id1494 . -7) (undo-tree-id1495 . -7) (undo-tree-id1496 . -7) (undo-tree-id1497 . -7) (undo-tree-id1498 . -7) (undo-tree-id1499 . -7) (undo-tree-id1500 . -7) (undo-tree-id1501 . -7) (undo-tree-id1502 . -7) (undo-tree-id1503 . -7) (undo-tree-id1504 . -7) (undo-tree-id1505 . -7) (undo-tree-id1506 . -7) (undo-tree-id1507 . -7) (undo-tree-id1508 . -7) (undo-tree-id1509 . -7) (undo-tree-id1510 . -7) (undo-tree-id1511 . -7) (undo-tree-id1512 . -7) (undo-tree-id1513 . -7) (undo-tree-id1514 . -7) (undo-tree-id1515 . -7) (undo-tree-id1516 . -7) (undo-tree-id1517 . -7) (undo-tree-id1518 . -7) (undo-tree-id1519 . -7) (undo-tree-id1520 . -7) (undo-tree-id1521 . -7) (undo-tree-id1522 . -7) (undo-tree-id1523 . -7) (undo-tree-id1524 . -7) (undo-tree-id1525 . -7) (undo-tree-id1526 . -7) (undo-tree-id1527 . -7) (undo-tree-id1528 . -7) (undo-tree-id1529 . -7) (undo-tree-id1530 . -7) (undo-tree-id1531 . -7) (undo-tree-id1532 . -7) (undo-tree-id1533 . -7) (undo-tree-id1534 . -7) (undo-tree-id1535 . -7) (undo-tree-id1536 . -7) (undo-tree-id1537 . -7) (undo-tree-id1538 . -7) (undo-tree-id1539 . -7) (undo-tree-id1540 . -7) (undo-tree-id1541 . -7) (undo-tree-id1542 . -7) (undo-tree-id1543 . -7) (undo-tree-id1544 . -7) (undo-tree-id1545 . -7) (undo-tree-id1546 . -7) (undo-tree-id1547 . -7) (undo-tree-id1548 . -7) (undo-tree-id1549 . -7) (undo-tree-id1550 . -7) (undo-tree-id1551 . -7) (undo-tree-id1552 . -7) (undo-tree-id1553 . -7) (undo-tree-id1554 . -7) (undo-tree-id1555 . -7) (undo-tree-id1556 . -7) (undo-tree-id1557 . -7) (undo-tree-id1558 . -7) (undo-tree-id1559 . -7) (undo-tree-id1560 . -7) (undo-tree-id1561 . -7) (undo-tree-id1562 . -7) (undo-tree-id1563 . -7) (undo-tree-id1564 . -7) (undo-tree-id1565 . -7) (undo-tree-id1566 . -7) (undo-tree-id1567 . -7) (undo-tree-id1568 . -7) (undo-tree-id1569 . -7) (undo-tree-id1570 . -7) (undo-tree-id1571 . -7) (undo-tree-id1572 . -7) (undo-tree-id1573 . -7) (undo-tree-id1574 . -7) (undo-tree-id1575 . -7) (undo-tree-id1576 . -7) (undo-tree-id1577 . -7) (undo-tree-id1578 . -7) (undo-tree-id1579 . -7) (undo-tree-id1580 . -7) (undo-tree-id1581 . -7) (undo-tree-id1582 . -7) (undo-tree-id1583 . -7) (undo-tree-id1584 . -7) (undo-tree-id1585 . -7) (undo-tree-id1586 . -7) (undo-tree-id1587 . -7) (undo-tree-id1588 . -7) (undo-tree-id1589 . -7) (undo-tree-id1590 . -7) (undo-tree-id1591 . -7) (undo-tree-id1592 . -7) (undo-tree-id1593 . -7) (undo-tree-id1594 . -7) (undo-tree-id1595 . -7) (undo-tree-id1596 . -7) (undo-tree-id1597 . -7) (undo-tree-id1598 . -7) (undo-tree-id1599 . -7) (undo-tree-id1600 . -7) (undo-tree-id1601 . -7) (undo-tree-id1602 . -7) (undo-tree-id1603 . -7) (undo-tree-id1604 . -7) (undo-tree-id1605 . -7) (undo-tree-id1606 . -7) (undo-tree-id1607 . -7) (undo-tree-id1608 . -7) (undo-tree-id1609 . -7) (undo-tree-id1610 . -7) (undo-tree-id1611 . -7) (undo-tree-id1612 . -7) (undo-tree-id1613 . -7) (undo-tree-id1614 . -7) (undo-tree-id1615 . -7) (undo-tree-id1616 . -7) (undo-tree-id1617 . -7) (undo-tree-id1618 . -7) (undo-tree-id1619 . -7) 171) nil (25221 56778 343380 529000) 0 nil])
([nil nil ((#("V" 0 1 (fontified t)) . -171) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) 172 (164 . 172) (163 . 164) (164 . 165) (#("	" 0 1 (fontified nil)) . 163) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (164 . 165) (t 25221 56778 371083 476000)) nil (25221 56810 857904 491000) 0 nil])
([nil nil ((#("	public 
	
	public E getElemento() {
	    return elemento;
	}
	public Nodo<E> getPadre() {
	    return padre;
	}
	public Nodo<E> getIzquierdo() {
	    return izquierdo;
	}
	public Nodo<E> getDerecho() {
	    return derecho;
	}
" 0 1 (fontified t) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t face font-lock-keyword-face) 16 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 20 (fontified t c-type c-decl-id-start face font-lock-type-face) 20 21 (fontified t) 21 22 (fontified t face font-lock-function-name-face) 22 23 (fontified t face font-lock-function-name-face) 23 24 (fontified t face font-lock-function-name-face) 24 25 (fontified t face font-lock-function-name-face) 25 26 (fontified t face font-lock-function-name-face) 26 27 (fontified t face font-lock-function-name-face) 27 28 (fontified t face font-lock-function-name-face) 28 29 (fontified t face font-lock-function-name-face) 29 30 (fontified t face font-lock-function-name-face) 30 31 (fontified t face font-lock-function-name-face) 31 32 (fontified t face font-lock-function-name-face) 32 33 (fontified t face (rainbow-delimiters-depth-3-face)) 33 34 (fontified t face (rainbow-delimiters-depth-3-face)) 34 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-3-face)) 36 37 (fontified t) 37 42 (fontified t) 42 43 (fontified t face font-lock-keyword-face) 43 44 (fontified t face font-lock-keyword-face) 44 45 (fontified t face font-lock-keyword-face) 45 46 (fontified t face font-lock-keyword-face) 46 47 (fontified t face font-lock-keyword-face) 47 48 (fontified t face font-lock-keyword-face) 48 49 (fontified t) 49 50 (fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 53 (fontified t) 53 54 (fontified t) 54 55 (fontified t) 55 56 (fontified t) 56 57 (fontified t) 57 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t) 60 61 (fontified t face (rainbow-delimiters-depth-3-face)) 61 62 (fontified t) 62 63 (fontified t) 63 64 (fontified t face font-lock-keyword-face) 64 65 (fontified t face font-lock-keyword-face) 65 66 (fontified t face font-lock-keyword-face) 66 67 (fontified t face font-lock-keyword-face) 67 68 (fontified t face font-lock-keyword-face) 68 69 (fontified t face font-lock-keyword-face) 69 70 (fontified t) 70 71 (fontified t face font-lock-type-face) 71 72 (fontified t face font-lock-type-face) 72 73 (fontified t face font-lock-type-face) 73 74 (fontified t face font-lock-type-face) 74 75 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 75 76 (fontified t face font-lock-type-face) 76 77 (category c->-as-paren-syntax fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 77 78 (fontified t) 78 79 (fontified t face font-lock-function-name-face) 79 80 (fontified t face font-lock-function-name-face) 80 81 (fontified t face font-lock-function-name-face) 81 82 (fontified t face font-lock-function-name-face) 82 83 (fontified t face font-lock-function-name-face) 83 84 (fontified t face font-lock-function-name-face) 84 85 (fontified t face font-lock-function-name-face) 85 86 (fontified t face font-lock-function-name-face) 86 87 (fontified t face (rainbow-delimiters-depth-3-face)) 87 88 (fontified t face (rainbow-delimiters-depth-3-face)) 88 89 (fontified t) 89 90 (fontified t face (rainbow-delimiters-depth-3-face)) 90 91 (fontified t) 91 96 (fontified t) 96 97 (fontified t face font-lock-keyword-face) 97 98 (fontified t face font-lock-keyword-face) 98 99 (fontified t face font-lock-keyword-face) 99 100 (fontified t face font-lock-keyword-face) 100 101 (fontified t face font-lock-keyword-face) 101 102 (fontified t face font-lock-keyword-face) 102 103 (fontified t) 103 104 (fontified t) 104 105 (fontified t) 105 106 (fontified t) 106 107 (fontified t) 107 108 (fontified t) 108 109 (fontified t) 109 110 (fontified t) 110 111 (fontified t) 111 112 (fontified t face (rainbow-delimiters-depth-3-face)) 112 113 (fontified t) 113 114 (fontified t) 114 115 (fontified t face font-lock-keyword-face) 115 116 (fontified t face font-lock-keyword-face) 116 117 (fontified t face font-lock-keyword-face) 117 119 (fontified t face font-lock-keyword-face) 119 120 (fontified t face font-lock-keyword-face) 120 121 (fontified t) 121 122 (fontified t face font-lock-type-face) 122 123 (fontified t face font-lock-type-face) 123 124 (fontified t face font-lock-type-face) 124 125 (fontified t face font-lock-type-face) 125 126 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 126 127 (fontified t face font-lock-type-face) 127 128 (category c->-as-paren-syntax fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 128 129 (fontified t) 129 130 (fontified t face font-lock-function-name-face) 130 131 (fontified t face font-lock-function-name-face) 131 132 (fontified t face font-lock-function-name-face) 132 133 (fontified t face font-lock-function-name-face) 133 134 (fontified t face font-lock-function-name-face) 134 135 (fontified t face font-lock-function-name-face) 135 136 (fontified t face font-lock-function-name-face) 136 137 (fontified t face font-lock-function-name-face) 137 139 (fontified t face font-lock-function-name-face) 139 140 (fontified t face font-lock-function-name-face) 140 141 (fontified t face font-lock-function-name-face) 141 142 (fontified t face (rainbow-delimiters-depth-3-face)) 142 143 (fontified t face (rainbow-delimiters-depth-3-face)) 143 144 (fontified t) 144 145 (fontified t face (rainbow-delimiters-depth-3-face)) 145 146 (fontified t) 146 151 (fontified t) 151 152 (fontified t face font-lock-keyword-face) 152 153 (fontified t face font-lock-keyword-face) 153 154 (fontified t face font-lock-keyword-face) 154 155 (fontified t face font-lock-keyword-face) 155 156 (fontified t face font-lock-keyword-face) 156 157 (fontified t face font-lock-keyword-face) 157 158 (fontified t) 158 159 (fontified t) 159 160 (fontified t) 160 161 (fontified t) 161 162 (fontified t) 162 163 (fontified t) 163 164 (fontified t) 164 165 (fontified t) 165 166 (fontified t) 166 167 (fontified t) 167 168 (fontified t) 168 169 (fontified t) 169 170 (fontified t) 170 171 (fontified t face (rainbow-delimiters-depth-3-face)) 171 172 (fontified t) 172 173 (fontified t) 173 174 (fontified t face font-lock-keyword-face) 174 175 (fontified t face font-lock-keyword-face) 175 176 (fontified t face font-lock-keyword-face) 176 177 (fontified t face font-lock-keyword-face) 177 178 (fontified t face font-lock-keyword-face) 178 179 (fontified t face font-lock-keyword-face) 179 180 (fontified t) 180 181 (fontified t face font-lock-type-face) 181 182 (fontified t face font-lock-type-face) 182 183 (fontified t face font-lock-type-face) 183 184 (fontified t face font-lock-type-face) 184 185 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 185 186 (fontified t face font-lock-type-face) 186 187 (category c->-as-paren-syntax fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 187 188 (fontified t) 188 189 (fontified t face font-lock-function-name-face) 189 190 (fontified t face font-lock-function-name-face) 190 191 (fontified t face font-lock-function-name-face) 191 192 (fontified t face font-lock-function-name-face) 192 193 (fontified t face font-lock-function-name-face) 193 194 (fontified t face font-lock-function-name-face) 194 195 (fontified t face font-lock-function-name-face) 195 196 (fontified t face font-lock-function-name-face) 196 197 (fontified t face font-lock-function-name-face) 197 198 (fontified t face font-lock-function-name-face) 198 199 (fontified t face (rainbow-delimiters-depth-3-face)) 199 200 (fontified t face (rainbow-delimiters-depth-3-face)) 200 201 (fontified t) 201 202 (fontified t face (rainbow-delimiters-depth-3-face)) 202 203 (fontified t) 203 208 (fontified t) 208 209 (fontified t face font-lock-keyword-face) 209 210 (fontified t face font-lock-keyword-face) 210 211 (fontified t face font-lock-keyword-face) 211 212 (fontified t face font-lock-keyword-face) 212 213 (fontified t face font-lock-keyword-face) 213 214 (fontified t face font-lock-keyword-face) 214 215 (fontified t) 215 216 (fontified t) 216 217 (fontified t) 217 218 (fontified t) 218 219 (fontified t) 219 220 (fontified t) 220 221 (fontified t) 221 222 (fontified t) 222 223 (fontified t) 223 224 (fontified t) 224 225 (fontified t) 225 226 (fontified t face (rainbow-delimiters-depth-3-face)) 226 227 (fontified t)) . 163) (undo-tree-id2990 . -226) (undo-tree-id2991 . 219) (undo-tree-id2992 . -226) (undo-tree-id2993 . -7) (undo-tree-id2994 . -226) (undo-tree-id2995 . -22) (undo-tree-id2996 . -32) (undo-tree-id2997 . -26) (undo-tree-id2998 . -32) (undo-tree-id2999 . -16) (undo-tree-id3000 . -36) (undo-tree-id3001 . 219) (undo-tree-id3002 . -8) (undo-tree-id3003 . -8) (undo-tree-id3004 . -8) (undo-tree-id3005 . -8) (undo-tree-id3006 . -8) (undo-tree-id3007 . -8) (undo-tree-id3008 . -8) (undo-tree-id3009 . -8) (undo-tree-id3010 . -8) (undo-tree-id3011 . -1) (undo-tree-id3012 . -34) (undo-tree-id3013 . -8) (undo-tree-id3014 . -8) (undo-tree-id3015 . -8) (undo-tree-id3016 . -8) (undo-tree-id3017 . -8) (undo-tree-id3018 . -8) (undo-tree-id3019 . -8) (undo-tree-id3020 . -8) (undo-tree-id3021 . -8) (undo-tree-id3022 . -8) (undo-tree-id3023 . -8) (undo-tree-id3024 . -8) (undo-tree-id3025 . -8) (undo-tree-id3026 . -8) (undo-tree-id3027 . -8) (undo-tree-id3028 . -8) (undo-tree-id3029 . -8) (undo-tree-id3030 . -8) (undo-tree-id3031 . -8) (undo-tree-id3032 . -8) (undo-tree-id3033 . -8) (undo-tree-id3034 . -8) (undo-tree-id3035 . -8) (undo-tree-id3036 . -8) (undo-tree-id3037 . -8) (undo-tree-id3038 . -7) (undo-tree-id3039 . -7) (undo-tree-id3040 . -7) (undo-tree-id3041 . -7) (undo-tree-id3042 . -7) (undo-tree-id3043 . -7) (undo-tree-id3044 . -7) (undo-tree-id3045 . -7) (undo-tree-id3046 . -7) (undo-tree-id3047 . -7) (undo-tree-id3048 . -7) (undo-tree-id3049 . -7) (undo-tree-id3050 . -7) (undo-tree-id3051 . -7) (undo-tree-id3052 . -7) (undo-tree-id3053 . -7) (undo-tree-id3054 . -7) (undo-tree-id3055 . -7) (undo-tree-id3056 . -7) (undo-tree-id3057 . -1) (undo-tree-id3058 . -9) (undo-tree-id3059 . -7) (undo-tree-id3060 . -7) (undo-tree-id3061 . -7) (undo-tree-id3062 . -7) (undo-tree-id3063 . -7) (undo-tree-id3064 . -7) (undo-tree-id3065 . -7) (undo-tree-id3066 . -7) (undo-tree-id3067 . -227) (undo-tree-id3068 . -7) (undo-tree-id3069 . -226) (undo-tree-id3070 . -7) (undo-tree-id3071 . -7) (undo-tree-id3072 . -7) (undo-tree-id3073 . -7) (undo-tree-id3074 . -7) (undo-tree-id3075 . -7) (undo-tree-id3076 . -7) (undo-tree-id3077 . -7) (undo-tree-id3078 . -7) (undo-tree-id3079 . -7) (undo-tree-id3080 . -7) (undo-tree-id3081 . -7) (undo-tree-id3082 . -7) (undo-tree-id3083 . -7) (undo-tree-id3084 . -7) (undo-tree-id3085 . -7) (undo-tree-id3086 . -7) (undo-tree-id3087 . -7) (undo-tree-id3088 . -10) (undo-tree-id3089 . -10) (undo-tree-id3090 . -10) (undo-tree-id3091 . -10) (undo-tree-id3092 . -10) (undo-tree-id3093 . -10) (undo-tree-id3094 . -10) (undo-tree-id3095 . -10) (undo-tree-id3096 . -18) (undo-tree-id3097 . -18) (undo-tree-id3098 . -18) (undo-tree-id3099 . -18) (undo-tree-id3100 . -18) (undo-tree-id3101 . -18) (undo-tree-id3102 . -18) (undo-tree-id3103 . -18) (undo-tree-id3104 . -44) (undo-tree-id3105 . -44) (undo-tree-id3106 . -44) (undo-tree-id3107 . -44) (undo-tree-id3108 . -44) (undo-tree-id3109 . -44) (undo-tree-id3110 . -44) (undo-tree-id3111 . -61) (undo-tree-id3112 . -61) (undo-tree-id3113 . -61) (undo-tree-id3114 . -61) (undo-tree-id3115 . -61) (undo-tree-id3116 . -61) (undo-tree-id3117 . -61) (undo-tree-id3118 . -61) (undo-tree-id3119 . -69) (undo-tree-id3120 . -69) (undo-tree-id3121 . -69) (undo-tree-id3122 . -69) (undo-tree-id3123 . -69) (undo-tree-id3124 . -69) (undo-tree-id3125 . -69) (undo-tree-id3126 . -69) (undo-tree-id3127 . -98) (undo-tree-id3128 . -98) (undo-tree-id3129 . -98) (undo-tree-id3130 . -98) (undo-tree-id3131 . -98) (undo-tree-id3132 . -98) (undo-tree-id3133 . -98) (undo-tree-id3134 . -112) (undo-tree-id3135 . -112) (undo-tree-id3136 . -112) (undo-tree-id3137 . -112) (undo-tree-id3138 . -112) (undo-tree-id3139 . -112) (undo-tree-id3140 . -112) (undo-tree-id3141 . -112) (undo-tree-id3142 . -120) (undo-tree-id3143 . -120) (undo-tree-id3144 . -120) (undo-tree-id3145 . -120) (undo-tree-id3146 . -120) (undo-tree-id3147 . -120) (undo-tree-id3148 . -120) (undo-tree-id3149 . -120) (undo-tree-id3150 . -153) (undo-tree-id3151 . -153) (undo-tree-id3152 . -153) (undo-tree-id3153 . -153) (undo-tree-id3154 . -153) (undo-tree-id3155 . -153) (undo-tree-id3156 . -153) (undo-tree-id3157 . -171) (undo-tree-id3158 . -171) (undo-tree-id3159 . -171) (undo-tree-id3160 . -171) (undo-tree-id3161 . -171) (undo-tree-id3162 . -171) (undo-tree-id3163 . -171) (undo-tree-id3164 . -171) (undo-tree-id3165 . -179) (undo-tree-id3166 . -179) (undo-tree-id3167 . -179) (undo-tree-id3168 . -179) (undo-tree-id3169 . -179) (undo-tree-id3170 . -179) (undo-tree-id3171 . -179) (undo-tree-id3172 . -179) (undo-tree-id3173 . -210) (undo-tree-id3174 . -210) (undo-tree-id3175 . -210) (undo-tree-id3176 . -210) (undo-tree-id3177 . -210) (undo-tree-id3178 . -210) (undo-tree-id3179 . -210) (undo-tree-id3180 . -224) (undo-tree-id3181 . -226) (undo-tree-id3182 . -226) (undo-tree-id3183 . -226) (undo-tree-id3184 . -226) (undo-tree-id3185 . -226) (undo-tree-id3186 . -226) (undo-tree-id3187 . -226) (undo-tree-id3188 . -226) (undo-tree-id3189 . -226) 389) nil (25221 56810 857405 981000) 0 nil])
([nil nil ((#("	private E elementos;
	private Nodo<E> padre;
	private Nodo<E> izquierdo;
	private Nodo<E> derecho;

" 0 1 (rear-nonsticky t fontified t) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 10 (fontified t c-type c-decl-id-start face font-lock-type-face) 10 11 (fontified t) 11 12 (fontified t face font-lock-variable-name-face) 12 13 (fontified t face font-lock-variable-name-face) 13 14 (fontified t face font-lock-variable-name-face) 14 15 (fontified t face font-lock-variable-name-face) 15 16 (fontified t face font-lock-variable-name-face) 16 17 (fontified t face font-lock-variable-name-face) 17 18 (fontified t face font-lock-variable-name-face) 18 19 (fontified t face font-lock-variable-name-face) 19 20 (fontified t face font-lock-variable-name-face) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t face font-lock-keyword-face) 24 25 (fontified t face font-lock-keyword-face) 25 26 (fontified t face font-lock-keyword-face) 26 27 (fontified t face font-lock-keyword-face) 27 28 (fontified t face font-lock-keyword-face) 28 29 (fontified t face font-lock-keyword-face) 29 30 (fontified t face font-lock-keyword-face) 30 31 (fontified t) 31 35 (fontified t face font-lock-type-face) 35 36 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 36 37 (fontified t face font-lock-type-face) 37 38 (category c->-as-paren-syntax fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 38 39 (fontified t) 39 44 (fontified t face font-lock-variable-name-face) 44 46 (fontified t) 46 47 (fontified t) 47 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 59 (fontified t face font-lock-type-face) 59 60 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 60 61 (fontified t face font-lock-type-face) 61 62 (category c->-as-paren-syntax fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 62 63 (fontified t) 63 72 (fontified t face font-lock-variable-name-face) 72 75 (fontified t) 75 82 (fontified t face font-lock-keyword-face) 82 83 (fontified t) 83 87 (fontified t face font-lock-type-face) 87 88 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 88 89 (fontified t face font-lock-type-face) 89 90 (category c->-as-paren-syntax fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 90 91 (fontified t) 91 98 (fontified t face font-lock-variable-name-face) 98 101 (fontified t)) . 62) (undo-tree-id2452 . -100) (undo-tree-id2453 . -100) (undo-tree-id2454 . -101) (undo-tree-id2455 . -101) (undo-tree-id2456 . -101) (undo-tree-id2457 . -101) (undo-tree-id2458 . -101) (undo-tree-id2459 . -101) (undo-tree-id2460 . -101) (undo-tree-id2461 . -101) (undo-tree-id2462 . -101) (undo-tree-id2463 . -101) (undo-tree-id2464 . -101) (undo-tree-id2465 . -101) (undo-tree-id2466 . -101) (undo-tree-id2467 . -101) (undo-tree-id2468 . -101) (undo-tree-id2469 . -101) (undo-tree-id2470 . -101) (undo-tree-id2471 . -101) (undo-tree-id2472 . -101) (undo-tree-id2473 . -101) (undo-tree-id2474 . -101) (undo-tree-id2475 . -101) (undo-tree-id2476 . -101) (undo-tree-id2477 . -101) (undo-tree-id2478 . -101) (undo-tree-id2479 . -101) (undo-tree-id2480 . -101) (undo-tree-id2481 . -101) (undo-tree-id2482 . -101) (undo-tree-id2483 . -101) (undo-tree-id2484 . -101) (undo-tree-id2485 . -101) (undo-tree-id2486 . -101) (undo-tree-id2487 . -101) (undo-tree-id2488 . -101) (undo-tree-id2489 . -101) (undo-tree-id2490 . -101) (undo-tree-id2491 . -101) (undo-tree-id2492 . -101) (undo-tree-id2493 . -101) (undo-tree-id2494 . -101) (undo-tree-id2495 . -101) (undo-tree-id2496 . -101) (undo-tree-id2497 . -101) (undo-tree-id2498 . -101) (undo-tree-id2499 . -101) (undo-tree-id2500 . -101) (undo-tree-id2501 . -101) (undo-tree-id2502 . -101) (undo-tree-id2503 . -101) (undo-tree-id2504 . -101) (undo-tree-id2505 . -101) (undo-tree-id2506 . -101) (undo-tree-id2507 . -101) (undo-tree-id2508 . -101) (undo-tree-id2509 . -101) (undo-tree-id2510 . -101) (undo-tree-id2511 . -101) (undo-tree-id2512 . -101) (undo-tree-id2513 . -101) (undo-tree-id2514 . -101) (undo-tree-id2515 . -101) (undo-tree-id2516 . -101) (undo-tree-id2517 . -101) (undo-tree-id2518 . -101) (undo-tree-id2519 . -101) (undo-tree-id2520 . -101) (undo-tree-id2521 . -101) (undo-tree-id2522 . -101) (undo-tree-id2523 . -101) (undo-tree-id2524 . -101) (undo-tree-id2525 . -101) (undo-tree-id2526 . -101) (undo-tree-id2527 . -101) (undo-tree-id2528 . -101) (undo-tree-id2529 . -101) (undo-tree-id2530 . -101) (undo-tree-id2531 . -101) (undo-tree-id2532 . -101) (undo-tree-id2533 . -101) (undo-tree-id2534 . -101) (undo-tree-id2535 . -101) (undo-tree-id2536 . -101) (undo-tree-id2537 . -101) (undo-tree-id2538 . -101) (undo-tree-id2539 . -101) (undo-tree-id2540 . -101) (undo-tree-id2541 . -101) (undo-tree-id2542 . -101) (undo-tree-id2543 . -101) (undo-tree-id2544 . -101) (undo-tree-id2545 . -101) (undo-tree-id2546 . -101) (undo-tree-id2547 . -101) (undo-tree-id2548 . -101) (undo-tree-id2549 . -101) (undo-tree-id2550 . -101) (undo-tree-id2551 . -101) (undo-tree-id2552 . -101) (undo-tree-id2553 . -101) (undo-tree-id2554 . -101) (undo-tree-id2555 . -101) (undo-tree-id2556 . -101) (undo-tree-id2557 . -101) (undo-tree-id2558 . -101) (undo-tree-id2559 . -101) (undo-tree-id2560 . -101) (undo-tree-id2561 . -101) (undo-tree-id2562 . -101) (undo-tree-id2563 . -101) (undo-tree-id2564 . -101) (undo-tree-id2565 . -101) (undo-tree-id2566 . -101) (undo-tree-id2567 . -101) (undo-tree-id2568 . -101) (undo-tree-id2569 . -101) (undo-tree-id2570 . -101) (undo-tree-id2571 . -101) (undo-tree-id2572 . -101) (undo-tree-id2573 . -101) (undo-tree-id2574 . -101) (undo-tree-id2575 . -101) (undo-tree-id2576 . -101) (undo-tree-id2577 . -101) (undo-tree-id2578 . -101) (undo-tree-id2579 . -101) (undo-tree-id2580 . -101) (undo-tree-id2581 . -101) (undo-tree-id2582 . -101) (undo-tree-id2583 . -101) (undo-tree-id2584 . -101) (undo-tree-id2585 . -101) (undo-tree-id2586 . -101) (undo-tree-id2587 . -101) (undo-tree-id2588 . -101) (undo-tree-id2589 . -101) (undo-tree-id2590 . -101) (undo-tree-id2591 . -101) (undo-tree-id2592 . -101) (undo-tree-id2593 . -101) (undo-tree-id2594 . -101) (undo-tree-id2595 . -101) (undo-tree-id2596 . -101) (undo-tree-id2597 . -101) (undo-tree-id2598 . -101) (undo-tree-id2599 . -101) (undo-tree-id2600 . -101) (undo-tree-id2601 . -101) (undo-tree-id2602 . -101) (undo-tree-id2603 . -101) (undo-tree-id2604 . -101) (undo-tree-id2605 . -101) (undo-tree-id2606 . -101) (undo-tree-id2607 . -101) (undo-tree-id2608 . -101) (undo-tree-id2609 . -101) (undo-tree-id2610 . -101) (undo-tree-id2611 . -101) (undo-tree-id2612 . -101) (undo-tree-id2613 . -101) (undo-tree-id2614 . -101) (undo-tree-id2615 . -101) (undo-tree-id2616 . -101) (undo-tree-id2617 . -101) (undo-tree-id2618 . -101) (undo-tree-id2619 . -101) (undo-tree-id2620 . -101) (undo-tree-id2621 . -101) (undo-tree-id2622 . -101) (undo-tree-id2623 . -101) (undo-tree-id2624 . -101) (undo-tree-id2625 . -101) (undo-tree-id2626 . -101) (undo-tree-id2627 . -101) (undo-tree-id2628 . -101) (undo-tree-id2629 . -101) (undo-tree-id2630 . -101) (undo-tree-id2631 . -101) (undo-tree-id2632 . -101) (undo-tree-id2633 . -101) (undo-tree-id2634 . -101) (undo-tree-id2635 . -101) (undo-tree-id2636 . -101) (undo-tree-id2637 . -101) (undo-tree-id2638 . -101) (undo-tree-id2639 . -101) (undo-tree-id2640 . -101) (undo-tree-id2641 . -101) (undo-tree-id2642 . -101) (undo-tree-id2643 . -101) (undo-tree-id2644 . -101) (undo-tree-id2645 . -101) (undo-tree-id2646 . -101) (undo-tree-id2647 . -101) (undo-tree-id2648 . -101) (undo-tree-id2649 . -101) (undo-tree-id2650 . -101) (undo-tree-id2651 . -101) (undo-tree-id2652 . -101) (undo-tree-id2653 . -101) (undo-tree-id2654 . -101) (undo-tree-id2655 . -11) (undo-tree-id2656 . -19) (undo-tree-id2657 . -101) (undo-tree-id2658 . -101) (undo-tree-id2659 . -101) (undo-tree-id2660 . -101) (undo-tree-id2661 . -101) (undo-tree-id2662 . -101) (undo-tree-id2663 . -101) (undo-tree-id2664 . -101) (undo-tree-id2665 . -101) (undo-tree-id2666 . -101) (undo-tree-id2667 . -101) (undo-tree-id2668 . -101) (undo-tree-id2669 . -101) (undo-tree-id2670 . -101) (undo-tree-id2671 . -101) (undo-tree-id2672 . -101) (undo-tree-id2673 . -101) (undo-tree-id2674 . -101) (undo-tree-id2675 . -101) (undo-tree-id2676 . -101) (undo-tree-id2677 . -101) (undo-tree-id2678 . -101) (undo-tree-id2679 . -101) (undo-tree-id2680 . -101) (undo-tree-id2681 . -101) (undo-tree-id2682 . -101) (undo-tree-id2683 . -101) (undo-tree-id2684 . -101) (undo-tree-id2685 . -101) (undo-tree-id2686 . -101) (undo-tree-id2687 . -101) (undo-tree-id2688 . -101) (undo-tree-id2689 . -101) (undo-tree-id2690 . -101) (undo-tree-id2691 . -101) (undo-tree-id2692 . -101) (undo-tree-id2693 . -101) (undo-tree-id2694 . -101) (undo-tree-id2695 . -101) (undo-tree-id2696 . -101) (undo-tree-id2697 . -101) (undo-tree-id2698 . -101) (undo-tree-id2699 . -101) (undo-tree-id2700 . -101) (undo-tree-id2701 . -101) (undo-tree-id2702 . -101) (undo-tree-id2703 . -101) (undo-tree-id2704 . -101) (undo-tree-id2705 . -101) (undo-tree-id2706 . -101) (undo-tree-id2707 . -101) (undo-tree-id2708 . -101) (undo-tree-id2709 . -101) (undo-tree-id2710 . -101) (undo-tree-id2711 . -101) (undo-tree-id2712 . -101) (undo-tree-id2713 . -101) (undo-tree-id2714 . -101) (undo-tree-id2715 . -101) (undo-tree-id2716 . -101) (undo-tree-id2717 . -101) (undo-tree-id2718 . -101) (undo-tree-id2719 . -101) (undo-tree-id2720 . -101) (undo-tree-id2721 . -101) (undo-tree-id2722 . -101) (undo-tree-id2723 . -101) (undo-tree-id2724 . -101) (undo-tree-id2725 . -101) (undo-tree-id2726 . -101) (undo-tree-id2727 . -101) (undo-tree-id2728 . -101) (undo-tree-id2729 . -101) (undo-tree-id2730 . -101) (undo-tree-id2731 . -101) (undo-tree-id2732 . -101) (undo-tree-id2733 . -101) (undo-tree-id2734 . -101) (undo-tree-id2735 . -101) (undo-tree-id2736 . -101) (undo-tree-id2737 . -101) (undo-tree-id2738 . -101) (undo-tree-id2739 . -101) (undo-tree-id2740 . -101) (undo-tree-id2741 . -101) (undo-tree-id2742 . -101) (undo-tree-id2743 . -101) (undo-tree-id2744 . -101) (undo-tree-id2745 . -101) (undo-tree-id2746 . -101) (undo-tree-id2747 . -101) (undo-tree-id2748 . -101) (undo-tree-id2749 . -101) (undo-tree-id2750 . -101) (undo-tree-id2751 . -101) (undo-tree-id2752 . -101) (undo-tree-id2753 . -101) (undo-tree-id2754 . -101) (undo-tree-id2755 . -101) (undo-tree-id2756 . -101) (undo-tree-id2757 . -101) (undo-tree-id2758 . -101) (undo-tree-id2759 . -101) (undo-tree-id2760 . -101) (undo-tree-id2761 . -101) (undo-tree-id2762 . -101) (undo-tree-id2763 . -101) (undo-tree-id2764 . -101) (undo-tree-id2765 . -101) (undo-tree-id2766 . -101) (undo-tree-id2767 . -101) (undo-tree-id2768 . -101) (undo-tree-id2769 . -101) (undo-tree-id2770 . -101) (undo-tree-id2771 . -101) (undo-tree-id2772 . -101) (undo-tree-id2773 . -101) (undo-tree-id2774 . -101) (undo-tree-id2775 . -101) (undo-tree-id2776 . -101) (undo-tree-id2777 . -101) (undo-tree-id2778 . -101) (undo-tree-id2779 . -101) (undo-tree-id2780 . -101) (undo-tree-id2781 . -101) (undo-tree-id2782 . -101) (undo-tree-id2783 . -101) (undo-tree-id2784 . -101) (undo-tree-id2785 . -101) (undo-tree-id2786 . -101) (undo-tree-id2787 . -101) (undo-tree-id2788 . -101) (undo-tree-id2789 . -101) (undo-tree-id2790 . -101) (undo-tree-id2791 . -101) (undo-tree-id2792 . -101) (undo-tree-id2793 . -101) (undo-tree-id2794 . -101) (undo-tree-id2795 . -101) (undo-tree-id2796 . -101) (undo-tree-id2797 . -101) (undo-tree-id2798 . -101) (undo-tree-id2799 . -101) (undo-tree-id2800 . -101) (undo-tree-id2801 . -101) (undo-tree-id2802 . -101) (undo-tree-id2803 . -101) (undo-tree-id2804 . -101) (undo-tree-id2805 . -101) (undo-tree-id2806 . -101) (undo-tree-id2807 . -101) (undo-tree-id2808 . -101) (undo-tree-id2809 . -101) (undo-tree-id2810 . -101) (undo-tree-id2811 . -101) (undo-tree-id2812 . -101) (undo-tree-id2813 . -101) (undo-tree-id2814 . -101) (undo-tree-id2815 . -101) (undo-tree-id2816 . -101) (undo-tree-id2817 . -101) (undo-tree-id2818 . -101) (undo-tree-id2819 . -101) (undo-tree-id2820 . -101) (undo-tree-id2821 . -101) (undo-tree-id2822 . -101) (undo-tree-id2823 . -101) (undo-tree-id2824 . -101) (undo-tree-id2825 . -101) (undo-tree-id2826 . -101) (undo-tree-id2827 . -101) (undo-tree-id2828 . -101) (undo-tree-id2829 . -101) (undo-tree-id2830 . -101) (undo-tree-id2831 . -101) (undo-tree-id2832 . -101) (undo-tree-id2833 . -101) (undo-tree-id2834 . -101) (undo-tree-id2835 . -101) (undo-tree-id2836 . -101) (undo-tree-id2837 . -101) (undo-tree-id2838 . -101) (undo-tree-id2839 . -101) (undo-tree-id2840 . -101) (undo-tree-id2841 . -101) (undo-tree-id2842 . -101) (undo-tree-id2843 . -101) (undo-tree-id2844 . -101) (undo-tree-id2845 . -101) (undo-tree-id2846 . -101) (undo-tree-id2847 . -101) (undo-tree-id2848 . -101) (undo-tree-id2849 . -101) (undo-tree-id2850 . -101) (undo-tree-id2851 . -101) (undo-tree-id2852 . -101) (undo-tree-id2853 . -101) (undo-tree-id2854 . -101) (undo-tree-id2855 . -101) (undo-tree-id2856 . -101) (undo-tree-id2857 . -101) (undo-tree-id2858 . -101) (undo-tree-id2859 . -101) (undo-tree-id2860 . -101) (undo-tree-id2861 . -101) (undo-tree-id2862 . -101) (undo-tree-id2863 . -101) (undo-tree-id2864 . -101) (undo-tree-id2865 . -101) (undo-tree-id2866 . -101) (undo-tree-id2867 . -101) (undo-tree-id2868 . -101) (undo-tree-id2869 . -101) (undo-tree-id2870 . -101) (undo-tree-id2871 . -101) (undo-tree-id2872 . -101) (undo-tree-id2873 . -101) (undo-tree-id2874 . -101) (undo-tree-id2875 . -101) (undo-tree-id2876 . -101) (undo-tree-id2877 . -101) (undo-tree-id2878 . -101) (undo-tree-id2879 . -101) (undo-tree-id2880 . -101) (undo-tree-id2881 . -101) (undo-tree-id2882 . -101) (undo-tree-id2883 . -101) (undo-tree-id2884 . -101) (undo-tree-id2885 . -101) (undo-tree-id2886 . -101) (undo-tree-id2887 . -101) (undo-tree-id2888 . -101) (undo-tree-id2889 . -101) (undo-tree-id2890 . -101) (undo-tree-id2891 . -100) (undo-tree-id2892 . -100) (undo-tree-id2893 . -100) (undo-tree-id2894 . -100) (undo-tree-id2895 . -100) (undo-tree-id2896 . -100) (undo-tree-id2897 . -100) (undo-tree-id2898 . -100) (undo-tree-id2899 . -100) (undo-tree-id2900 . -100) (undo-tree-id2901 . -100) (undo-tree-id2902 . -100) (undo-tree-id2903 . -100) (undo-tree-id2904 . -100) (undo-tree-id2905 . -100) (undo-tree-id2906 . -75) (undo-tree-id2907 . -75) (undo-tree-id2908 . -75) (undo-tree-id2909 . -75) (undo-tree-id2910 . -75) (undo-tree-id2911 . -75) (undo-tree-id2912 . -75) (undo-tree-id2913 . -75) (undo-tree-id2914 . -75) (undo-tree-id2915 . -75) (undo-tree-id2916 . -75) (undo-tree-id2917 . -75) (undo-tree-id2918 . -75) (undo-tree-id2919 . -75) (undo-tree-id2920 . -75) (undo-tree-id2921 . -75) (undo-tree-id2922 . -75) (undo-tree-id2923 . -75) (undo-tree-id2924 . -75) (undo-tree-id2925 . -75) (undo-tree-id2926 . -75) (undo-tree-id2927 . -75) (undo-tree-id2928 . -75) (undo-tree-id2929 . -75) (undo-tree-id2930 . -75) (undo-tree-id2931 . -75) (undo-tree-id2932 . -100) (undo-tree-id2933 . -100) (undo-tree-id2934 . -100) (undo-tree-id2935 . -100) (undo-tree-id2936 . -100) (undo-tree-id2937 . -100) (undo-tree-id2938 . -100) (undo-tree-id2939 . -100) (undo-tree-id2940 . -100) (undo-tree-id2941 . -100) (undo-tree-id2942 . -100) (undo-tree-id2943 . -100) (undo-tree-id2944 . -100) (undo-tree-id2945 . -100) (undo-tree-id2946 . -100) (undo-tree-id2947 . -100) (undo-tree-id2948 . -100) (undo-tree-id2949 . -100) (undo-tree-id2950 . -100) (undo-tree-id2951 . -100) (undo-tree-id2952 . -100) (undo-tree-id2953 . -100) (undo-tree-id2954 . -100) (undo-tree-id2955 . -100) (undo-tree-id2956 . -100) (undo-tree-id2957 . -100) (undo-tree-id2958 . -101) (undo-tree-id2959 . -100) (undo-tree-id2960 . -100) (undo-tree-id2961 . -100) (undo-tree-id2962 . -100) (undo-tree-id2963 . -100) (undo-tree-id2964 . -100) (undo-tree-id2965 . -100) (undo-tree-id2966 . -100) (undo-tree-id2967 . -100) (undo-tree-id2968 . -100) (undo-tree-id2969 . -74) (undo-tree-id2970 . -74) (undo-tree-id2971 . -74) (undo-tree-id2972 . -74) (undo-tree-id2973 . -74) (undo-tree-id2974 . -74) (undo-tree-id2975 . -74) (undo-tree-id2976 . -46) (undo-tree-id2977 . -46) (undo-tree-id2978 . -46) (undo-tree-id2979 . -46) (undo-tree-id2980 . -46) (undo-tree-id2981 . -46) (undo-tree-id2982 . -46) (undo-tree-id2983 . -22) (undo-tree-id2984 . -22) (undo-tree-id2985 . -22) (undo-tree-id2986 . -22) (undo-tree-id2987 . -22) (undo-tree-id2988 . -22) (undo-tree-id2989 . -22)) nil (25221 56810 857001 619000) 0 nil])
([nil nil ((61 . 63) (t 25221 56810 886429 328000)) nil (25221 57060 731079 345000) 0 nil])
([nil nil ((63 . 65)) nil (25221 57060 731076 838000) 0 nil])
([nil nil ((65 . 70)) nil (25221 57060 731074 823000) 0 nil])
([nil nil ((70 . 71)) nil (25221 57060 731072 726000) 0 nil])
([nil nil ((71 . 73)) nil (25221 57060 731070 721000) 0 nil])
([nil nil ((73 . 78)) nil (25221 57060 731068 623000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t)) . -77) (undo-tree-id3492 . -1) 78) nil (25221 57060 731065 646000) 0 nil])
([nil nil ((77 . 82)) nil (25221 57060 731060 491000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -81) (undo-tree-id3491 . -1) 82) nil (25221 57060 731057 96000) 0 nil])
([nil nil ((81 . 83)) nil (25221 57060 731052 96000) 0 nil])
([nil nil ((83 . 86)) nil (25221 57060 731049 992000) 0 nil])
([nil nil ((86 . 87)) nil (25221 57060 731047 843000) 0 nil])
([nil nil ((87 . 89)) nil (25221 57060 731045 593000) 0 nil])
([nil nil ((89 . 106)) nil (25221 57060 731043 391000) 0 nil])
([nil nil ((106 . 107)) nil (25221 57060 731041 141000) 0 nil])
([nil nil ((107 . 109)) nil (25221 57060 731039 117000) 0 nil])
([nil nil ((109 . 115)) nil (25221 57060 731036 953000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t)) . -113) (undo-tree-id3489 . -1) (#("E" 0 1 (fontified t)) . -114) (undo-tree-id3490 . -1) 115) nil (25221 57060 731033 429000) 0 nil])
([nil nil ((113 . 114)) nil (25221 57060 731026 824000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -113) (undo-tree-id3488 . -1) 114) nil (25221 57060 731023 731000) 0 nil])
([nil nil ((113 . 114)) nil (25221 57060 731019 288000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t)) . -113) (undo-tree-id3487 . -1) 114) nil (25221 57060 731016 318000) 0 nil])
([nil nil ((113 . 118)) nil (25221 57060 731011 526000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -117) (undo-tree-id3486 . -1) 118) nil (25221 57060 731008 136000) 0 nil])
([nil nil ((117 . 119)) nil (25221 57060 731003 254000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face font-lock-variable-name-face)) . -117) (undo-tree-id3484 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -118) (undo-tree-id3485 . -1) 119) nil (25221 57060 731000 15000) 0 nil])
([nil nil ((117 . 124)) nil (25221 57060 730993 406000) 0 nil])
([nil nil ((124 . 125)) nil (25221 57060 730991 77000) 0 nil])
([nil nil ((127 . 128) (#("	" 0 1 (fontified nil)) . 126) (undo-tree-id3483 . -1) (125 . 128)) nil (25221 57060 730987 633000) 0 nil])
([nil nil ((128 . 132)) nil (25221 57060 730981 968000) 0 nil])
([nil nil ((132 . 134)) nil (25221 57060 730979 481000) 0 nil])
([nil nil ((133 . 140)) nil (25221 57060 730977 136000) 0 nil])
([nil nil ((141 . 143)) nil (25221 57060 730974 335000) 0 nil])
([nil nil ((144 . 145) (#("	" 0 1 (fontified nil)) . 143) (undo-tree-id3482 . -1) (142 . 145)) nil (25221 57060 730970 777000) 0 nil])
([nil nil ((143 . 148)) nil (25221 57060 730964 826000) 0 nil])
([nil nil ((148 . 156)) nil (25221 57060 730961 934000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -153) (undo-tree-id3479 . -1) (#("l" 0 1 (fontified t)) . -154) (undo-tree-id3480 . -1) (#("e" 0 1 (fontified t)) . -155) (undo-tree-id3481 . -1) 156) nil (25221 57060 730957 449000) 0 nil])
([nil nil ((153 . 166)) nil (25221 57060 730947 589000) 0 nil])
([nil nil ((166 . 167)) nil (25221 57060 730945 326000) 0 nil])
([nil nil ((33 . 37) (#("    " 0 4 (fontified nil)) . 32) (undo-tree-id3478 . -4) (31 . 37)) nil (25221 57060 730941 704000) 0 nil])
([nil nil ((32 . 36)) nil (25221 57060 730935 762000) 0 nil])
([nil nil ((36 . 44)) nil (25221 57060 730932 982000) 0 nil])
([nil nil ((44 . 50)) nil (25221 57060 730929 705000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face font-lock-type-face)) . -49) (undo-tree-id3477 . -1) 50) nil (25221 57060 730926 181000) 0 nil])
([nil nil ((49 . 52)) nil (25221 57060 730920 999000) 0 nil])
([nil nil ((52 . 56)) nil (25221 57060 730918 684000) 0 nil])
([nil nil ((56 . 57)) nil (25221 57060 730916 71000) 0 nil])
([nil nil ((198 . 204)) nil (25221 57060 730913 486000) 0 nil])
([nil nil ((204 . 210)) nil (25221 57060 730910 938000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -209) (undo-tree-id3476 . -1) 210) nil (25221 57060 730907 391000) 0 nil])
([nil nil ((209 . 222)) nil (25221 57060 730902 249000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -221) (undo-tree-id3475 . -1) 222) nil (25221 57060 730898 16000) 0 nil])
([nil nil ((221 . 224)) nil (25221 57060 730892 565000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -221) (undo-tree-id3472 . -1) (#("z" 0 1 (fontified t)) . -222) (undo-tree-id3473 . -1) (#("q" 0 1 (fontified t)) . -223) (undo-tree-id3474 . -1) 224) nil (25221 57060 730887 838000) 0 nil])
([nil nil ((221 . 224)) nil (25221 57060 730877 320000) 0 nil])
([nil nil ((224 . 225)) nil (25221 57060 730874 636000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -224) (undo-tree-id3471 . -1) 225) nil (25221 57060 730870 453000) 0 nil])
([nil nil ((224 . 225)) nil (25221 57060 730850 699000) 0 nil])
([nil nil ((225 . 226)) nil (25221 57060 730848 14000) 0 nil])
([nil nil ((226 . 232)) nil (25221 57060 730845 224000) 0 nil])
([nil nil ((232 . 234)) nil (25221 57060 730842 606000) 0 nil])
([nil nil ((234 . 251)) nil (25221 57060 730839 51000) 0 nil])
([nil nil ((251 . 252)) nil (25221 57060 730827 180000) 0 nil])
([nil nil ((#("B" 0 1 (fontified t face font-lock-type-face)) . -19) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -20) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) (undo-tree-id3650 . -1) (undo-tree-id3651 . -1) (undo-tree-id3652 . -1) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) (undo-tree-id3665 . -1) (undo-tree-id3666 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -21) (undo-tree-id3667 . -1) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1) (undo-tree-id3670 . -1) (undo-tree-id3671 . -1) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (undo-tree-id3676 . -1) (undo-tree-id3677 . -1) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (undo-tree-id3682 . -1) (undo-tree-id3683 . -1) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) (undo-tree-id3687 . -1) (undo-tree-id3688 . -1) (undo-tree-id3689 . -1) (undo-tree-id3690 . -1) (undo-tree-id3691 . -1) (undo-tree-id3692 . -1) (undo-tree-id3693 . -1) (undo-tree-id3694 . -1) (undo-tree-id3695 . -1) (undo-tree-id3696 . -1) (undo-tree-id3697 . -1) (undo-tree-id3698 . -1) (undo-tree-id3699 . -1) (undo-tree-id3700 . -1) (undo-tree-id3701 . -1) (undo-tree-id3702 . -1) (undo-tree-id3703 . -1) (undo-tree-id3704 . -1) (undo-tree-id3705 . -1) (undo-tree-id3706 . -1) (undo-tree-id3707 . -1) (undo-tree-id3708 . -1) (undo-tree-id3709 . -1) (undo-tree-id3710 . -1) (undo-tree-id3711 . -1) (undo-tree-id3712 . -1) (undo-tree-id3713 . -1) (undo-tree-id3714 . -1) (undo-tree-id3715 . -1) (undo-tree-id3716 . -1) (undo-tree-id3717 . -1) (undo-tree-id3718 . -1) (undo-tree-id3719 . -1) (undo-tree-id3720 . -1) (undo-tree-id3721 . -1) (undo-tree-id3722 . -1) (undo-tree-id3723 . -1) (undo-tree-id3724 . -1) (undo-tree-id3725 . -1) (undo-tree-id3726 . -1) (undo-tree-id3727 . -1) (undo-tree-id3728 . -1) (undo-tree-id3729 . -1) (undo-tree-id3730 . -1) (undo-tree-id3731 . -1) (undo-tree-id3732 . -1) (undo-tree-id3733 . -1) (undo-tree-id3734 . -1) (undo-tree-id3735 . -1) (undo-tree-id3736 . -1) (undo-tree-id3737 . -1) (undo-tree-id3738 . -1) (undo-tree-id3739 . -1) (undo-tree-id3740 . -1) (undo-tree-id3741 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -22) (undo-tree-id3742 . -1) (undo-tree-id3743 . -1) (undo-tree-id3744 . -1) (undo-tree-id3745 . -1) (undo-tree-id3746 . -1) (undo-tree-id3747 . -1) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (undo-tree-id3750 . -1) (undo-tree-id3751 . -1) (undo-tree-id3752 . -1) (undo-tree-id3753 . -1) (undo-tree-id3754 . -1) (undo-tree-id3755 . -1) (undo-tree-id3756 . -1) (undo-tree-id3757 . -1) (undo-tree-id3758 . -1) (undo-tree-id3759 . -1) (undo-tree-id3760 . -1) (undo-tree-id3761 . -1) (undo-tree-id3762 . -1) (undo-tree-id3763 . -1) (undo-tree-id3764 . -1) (undo-tree-id3765 . -1) (undo-tree-id3766 . -1) (undo-tree-id3767 . -1) (undo-tree-id3768 . -1) (undo-tree-id3769 . -1) (undo-tree-id3770 . -1) (undo-tree-id3771 . -1) (undo-tree-id3772 . -1) (undo-tree-id3773 . -1) (undo-tree-id3774 . -1) (undo-tree-id3775 . -1) (undo-tree-id3776 . -1) (undo-tree-id3777 . -1) (undo-tree-id3778 . -1) (undo-tree-id3779 . -1) (undo-tree-id3780 . -1) (undo-tree-id3781 . -1) (undo-tree-id3782 . -1) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) (undo-tree-id3786 . -1) (undo-tree-id3787 . -1) (undo-tree-id3788 . -1) (undo-tree-id3789 . -1) (undo-tree-id3790 . -1) (undo-tree-id3791 . -1) (undo-tree-id3792 . -1) (undo-tree-id3793 . -1) (undo-tree-id3794 . -1) (undo-tree-id3795 . -1) (undo-tree-id3796 . -1) (undo-tree-id3797 . -1) (undo-tree-id3798 . -1) (undo-tree-id3799 . -1) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -23) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) (undo-tree-id3821 . -1) (undo-tree-id3822 . -1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -24) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (undo-tree-id3875 . -1) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) (undo-tree-id3892 . -1) (undo-tree-id3893 . -1) (undo-tree-id3894 . -1) (undo-tree-id3895 . -1) (undo-tree-id3896 . -1) (undo-tree-id3897 . -1) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (undo-tree-id3900 . -1) (undo-tree-id3901 . -1) (undo-tree-id3902 . -1) (undo-tree-id3903 . -1) (undo-tree-id3904 . -1) (undo-tree-id3905 . -1) (undo-tree-id3906 . -1) (undo-tree-id3907 . -1) (undo-tree-id3908 . -1) (undo-tree-id3909 . -1) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) (undo-tree-id3912 . -1) (undo-tree-id3913 . -1) (undo-tree-id3914 . -1) (undo-tree-id3915 . -1) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (undo-tree-id3918 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -25) (undo-tree-id3919 . -1) (undo-tree-id3920 . -1) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) (undo-tree-id3924 . -1) (undo-tree-id3925 . -1) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) (undo-tree-id3940 . -1) (undo-tree-id3941 . -1) (undo-tree-id3942 . -1) (undo-tree-id3943 . -1) (undo-tree-id3944 . -1) (undo-tree-id3945 . -1) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) 26 (t 25221 57060 759087 157000)) nil (25221 57717 349509 54000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t)) . -19) (undo-tree-id4008 . -1) (#("T" 0 1 (fontified t face font-lock-type-face)) . -20) (undo-tree-id4009 . -1) (#(">" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -21) (undo-tree-id4010 . -1) (undo-tree-id4011 . 1) (undo-tree-id4012 . -1) 22 (t 25221 57717 382071 206000)) nil (25221 57741 576145 889000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t)) . -38) (undo-tree-id3963 . -1) (undo-tree-id3964 . -1) (undo-tree-id3965 . -1) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (undo-tree-id3970 . -1) (undo-tree-id3971 . -1) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (undo-tree-id3974 . -1) (undo-tree-id3975 . -1) (undo-tree-id3976 . -1) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (undo-tree-id3979 . -1) (undo-tree-id3980 . -1) (undo-tree-id3981 . -1) (undo-tree-id3982 . -1) (undo-tree-id3983 . -1) (undo-tree-id3984 . -1) (undo-tree-id3985 . -1) (#("T" 0 1 (fontified t face font-lock-type-face)) . -39) (undo-tree-id3986 . -1) (undo-tree-id3987 . -1) (undo-tree-id3988 . -1) (undo-tree-id3989 . -1) (undo-tree-id3990 . -1) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) (#(">" 0 1 (fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-2-face))) . -40) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (undo-tree-id4007 . -1) 41) nil (25221 57741 576116 64000) 0 nil])
([nil nil ((252 . 253) (49 . 50) (t 25221 57741 606328 853000)) nil (25221 57814 752270 898000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2146 . 2147) (nil fontified nil 253 . 2147) (253 . 2147)) nil (25221 57814 752267 92000) 0 nil])
([nil nil ((#("public class Arbol {
    private Nodo raiz;
    V
    protected class Nodo<E> {
	E datos;
	Nodo<E> padre;
	Nodo<E> izquierdo;
	Nodo<E> derecho;

	Nodo(E datos){
	    this.datos = datos;
	    this.izquierdo = null;
	    this.derecho = null;
	}
    }
}

" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t face font-lock-keyword-face c-type c-decl-type-start) 12 13 (fontified t) 13 18 (fontified t face font-lock-type-face) 18 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-1-face)) 20 21 (fontified t) 21 25 (fontified t) 25 26 (fontified t face font-lock-keyword-face) 26 27 (fontified t face font-lock-keyword-face) 27 28 (fontified t face font-lock-keyword-face) 28 29 (fontified t face font-lock-keyword-face) 29 30 (fontified t face font-lock-keyword-face) 30 31 (fontified t face font-lock-keyword-face) 31 32 (fontified t face font-lock-keyword-face) 32 33 (fontified t) 33 34 (fontified t face font-lock-type-face) 34 35 (fontified t face font-lock-type-face) 35 36 (fontified t face font-lock-type-face) 36 37 (fontified t c-type c-decl-id-start face font-lock-type-face) 37 38 (fontified t) 38 39 (fontified t face font-lock-variable-name-face) 39 40 (fontified t face font-lock-variable-name-face) 40 41 (fontified t face font-lock-variable-name-face) 41 42 (fontified t face font-lock-variable-name-face) 42 43 (fontified t) 43 44 (fontified t) 44 48 (fontified t) 48 49 (fontified t c-type c-decl-type-start face font-lock-type-face) 49 50 (fontified t) 50 53 (fontified t) 53 54 (rear-nonsticky t fontified t) 54 55 (fontified t face font-lock-keyword-face) 55 56 (fontified t face font-lock-keyword-face) 56 57 (fontified t face font-lock-keyword-face) 57 58 (fontified t face font-lock-keyword-face) 58 59 (fontified t face font-lock-keyword-face) 59 60 (fontified t face font-lock-keyword-face) 60 61 (fontified t face font-lock-keyword-face) 61 62 (fontified t face font-lock-keyword-face) 62 63 (fontified t face font-lock-keyword-face) 63 64 (fontified t) 64 68 (fontified t face font-lock-keyword-face) 68 69 (fontified t face font-lock-keyword-face) 69 70 (fontified t) 70 74 (fontified t face font-lock-type-face) 74 75 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-2-face)) 75 76 (fontified t face font-lock-type-face) 76 77 (category c->-as-paren-syntax fontified t face (rainbow-delimiters-depth-2-face)) 77 78 (fontified t) 78 79 (fontified t face (rainbow-delimiters-depth-2-face)) 79 80 (fontified t) 80 81 (fontified t) 81 82 (fontified t c-type c-decl-id-start face font-lock-type-face) 82 83 (fontified t) 83 84 (fontified t face font-lock-variable-name-face) 84 85 (fontified t face font-lock-variable-name-face) 85 86 (fontified t face font-lock-variable-name-face) 86 87 (fontified t face font-lock-variable-name-face) 87 88 (fontified t face font-lock-variable-name-face) 88 89 (fontified t) 89 90 (fontified t) 90 91 (fontified t) 91 92 (fontified t face font-lock-type-face) 92 93 (fontified t face font-lock-type-face) 93 94 (fontified t face font-lock-type-face) 94 95 (fontified t face font-lock-type-face) 95 96 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 96 97 (fontified t face font-lock-type-face) 97 98 (category c->-as-paren-syntax fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 98 99 (fontified t) 99 100 (fontified t face font-lock-variable-name-face) 100 101 (fontified t face font-lock-variable-name-face) 101 102 (fontified t face font-lock-variable-name-face) 102 103 (fontified t face font-lock-variable-name-face) 103 104 (fontified t face font-lock-variable-name-face) 104 105 (fontified t) 105 106 (fontified t) 106 107 (fontified t) 107 108 (fontified t face font-lock-type-face) 108 109 (fontified t face font-lock-type-face) 109 110 (fontified t face font-lock-type-face) 110 111 (fontified t face font-lock-type-face) 111 112 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 112 113 (fontified t face font-lock-type-face) 113 114 (category c->-as-paren-syntax fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 114 115 (fontified t) 115 116 (fontified t face font-lock-variable-name-face) 116 117 (fontified t face font-lock-variable-name-face) 117 118 (fontified t face font-lock-variable-name-face) 118 119 (fontified t face font-lock-variable-name-face) 119 120 (fontified t face font-lock-variable-name-face) 120 121 (fontified t face font-lock-variable-name-face) 121 122 (fontified t face font-lock-variable-name-face) 122 123 (fontified t face font-lock-variable-name-face) 123 124 (fontified t face font-lock-variable-name-face) 124 125 (fontified t) 125 126 (fontified t) 126 127 (fontified t) 127 128 (fontified t face font-lock-type-face) 128 129 (fontified t face font-lock-type-face) 129 130 (fontified t face font-lock-type-face) 130 131 (fontified t face font-lock-type-face) 131 132 (category c-<-as-paren-syntax fontified t face (rainbow-delimiters-depth-3-face)) 132 133 (fontified t face font-lock-type-face) 133 134 (category c->-as-paren-syntax fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 134 135 (fontified t) 135 136 (fontified t face font-lock-variable-name-face) 136 137 (fontified t face font-lock-variable-name-face) 137 138 (fontified t face font-lock-variable-name-face) 138 139 (fontified t face font-lock-variable-name-face) 139 140 (fontified t face font-lock-variable-name-face) 140 141 (fontified t face font-lock-variable-name-face) 141 142 (fontified t face font-lock-variable-name-face) 142 143 (fontified t c-type c-decl-id-start) 143 144 (fontified t) 144 145 (fontified t) 145 146 (fontified t) 146 147 (fontified t face font-lock-function-name-face) 147 148 (fontified t face font-lock-function-name-face) 148 149 (fontified t face font-lock-function-name-face) 149 150 (fontified t face font-lock-function-name-face) 150 151 (fontified t c-type c-decl-arg-start face (rainbow-delimiters-depth-3-face)) 151 152 (fontified t face font-lock-type-face) 152 153 (fontified t) 153 154 (fontified t face font-lock-variable-name-face) 154 155 (fontified t face font-lock-variable-name-face) 155 156 (fontified t face font-lock-variable-name-face) 156 157 (fontified t face font-lock-variable-name-face) 157 158 (fontified t face font-lock-variable-name-face) 158 159 (fontified t face (rainbow-delimiters-depth-3-face)) 159 160 (fontified t face (rainbow-delimiters-depth-3-face)) 160 161 (fontified t) 161 166 (fontified t) 166 167 (fontified t face font-lock-keyword-face) 167 168 (fontified t face font-lock-keyword-face) 168 169 (fontified t face font-lock-keyword-face) 169 170 (fontified t face font-lock-keyword-face) 170 171 (fontified t) 171 172 (fontified t) 172 173 (fontified t) 173 174 (fontified t) 174 175 (fontified t) 175 176 (fontified t) 176 177 (fontified t) 177 178 (fontified t) 178 179 (fontified t) 179 180 (fontified t) 180 181 (fontified t) 181 182 (fontified t) 182 183 (fontified t) 183 184 (fontified t) 184 185 (fontified t) 185 186 (fontified t) 186 191 (fontified t) 191 192 (fontified t face font-lock-keyword-face) 192 193 (fontified t face font-lock-keyword-face) 193 194 (fontified t face font-lock-keyword-face) 194 195 (fontified t face font-lock-keyword-face) 195 196 (fontified t) 196 197 (fontified t) 197 198 (fontified t) 198 199 (fontified t) 199 200 (fontified t) 200 201 (fontified t) 201 202 (fontified t) 202 203 (fontified t) 203 204 (fontified t) 204 205 (fontified t) 205 206 (fontified t) 206 207 (fontified t) 207 208 (fontified t) 208 209 (fontified t face font-lock-constant-face) 209 210 (fontified t face font-lock-constant-face) 210 211 (fontified t face font-lock-constant-face) 211 212 (fontified t face font-lock-constant-face) 212 213 (fontified t) 213 214 (fontified t) 214 219 (fontified t) 219 220 (fontified t face font-lock-keyword-face) 220 221 (fontified t face font-lock-keyword-face) 221 222 (fontified t face font-lock-keyword-face) 222 223 (fontified t face font-lock-keyword-face) 223 224 (fontified t) 224 225 (fontified t) 225 226 (fontified t) 226 227 (fontified t) 227 228 (fontified t) 228 229 (fontified t) 229 230 (fontified t) 230 231 (fontified t) 231 232 (fontified t) 232 233 (fontified t) 233 234 (fontified t) 234 235 (fontified t face font-lock-constant-face) 235 236 (fontified t face font-lock-constant-face) 236 237 (fontified t face font-lock-constant-face) 237 238 (fontified t face font-lock-constant-face) 238 239 (fontified t) 239 240 (fontified t) 240 241 (fontified t) 241 242 (fontified t face (rainbow-delimiters-depth-3-face)) 242 243 (fontified t) 243 247 (fontified t) 247 248 (fontified t face (rainbow-delimiters-depth-2-face)) 248 249 (fontified t) 249 250 (fontified t face (rainbow-delimiters-depth-1-face)) 250 251 (fontified t) 251 252 (fontified t)) . 1) (undo-tree-id4019 . -48) (undo-tree-id4020 . -251) (undo-tree-id4021 . -251) (undo-tree-id4022 . -252) (undo-tree-id4023 . 13) (undo-tree-id4024 . -243) (undo-tree-id4025 . -48) (undo-tree-id4026 . -48) (undo-tree-id4027 . -48) (undo-tree-id4028 . -48) (undo-tree-id4029 . -48) (undo-tree-id4030 . -252) (undo-tree-id4031 . -251) (undo-tree-id4032 . 3) (undo-tree-id4033 . -250) (undo-tree-id4034 . 233) (undo-tree-id4035 . -20) (undo-tree-id4036 . -41) (undo-tree-id4037 . -43)) nil (25221 57814 752261 28000) 0 nil])
([nil nil ((#("    
" 0 5 (fontified t)) . 19)) nil (25221 57814 752217 787000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 19)) nil (25221 57814 752215 123000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 80)) nil (25221 57814 752212 780000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 80)) nil (25221 57814 752209 792000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 185)) nil (25221 57814 752207 203000) 0 nil])
([nil nil ((#("

" 0 2 (fontified t)) . 696)) nil (25221 57814 752204 508000) 0 nil])
([nil nil ((#("

" 0 2 (fontified t)) . 765)) nil (25221 57814 752201 212000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 716)) nil (25221 57814 752198 470000) 0 nil])
([nil nil ((#("

" 0 2 (fontified t)) . 958)) nil (25221 57814 752195 301000) 0 nil])
([nil nil ((#("

" 0 2 (fontified t)) . 964)) nil (25221 57814 752192 618000) 0 nil])
([nil nil ((#("

" 0 2 (fontified t)) . 1030)) nil (25221 57814 752189 838000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1264)) nil (25221 57814 752186 972000) 0 nil])
([nil nil ((#("


" 0 3 (fontified t)) . 1869)) nil (25221 57814 752183 853000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1869) (undo-tree-id4018 . -1)) nil (25221 57814 752180 927000) 0 nil])
([nil nil ((81 . 85) (#("    " 0 4 (fontified nil)) . 80) (undo-tree-id4017 . -4) (84 . 85)) nil (25221 57814 752176 36000) 0 nil])
([nil nil ((187 . 191) (#("    " 0 4 (fontified nil)) . 186) (undo-tree-id4016 . -4) (190 . 191)) nil (25221 57814 752170 306000) 0 nil])
([nil nil ((1033 . 1037) (#("    " 0 4 (fontified nil)) . 1032) (undo-tree-id4015 . -4) (1036 . 1037)) nil (25221 57814 752164 659000) 0 nil])
([nil nil ((967 . 971) (#("    " 0 4 (fontified nil)) . 966) (undo-tree-id4014 . -4) (970 . 971)) nil (25221 57814 752158 295000) 0 nil])
([nil nil ((767 . 771) (#("    " 0 4 (fontified nil)) . 766) (undo-tree-id4013 . -4) (770 . 771)) nil (25221 57814 752150 505000) 0 nil])
([nil nil ((1875 . 1876) 5) nil (25221 57814 752122 766000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1868) (undo-tree-id4084 . -1) (undo-tree-id4085 . -1) (undo-tree-id4086 . -1) (undo-tree-id4087 . -1) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) (undo-tree-id4095 . -1) (undo-tree-id4096 . -1) (undo-tree-id4097 . -1) (undo-tree-id4098 . -1) (undo-tree-id4099 . -1) (undo-tree-id4100 . -1) (undo-tree-id4101 . -1) (undo-tree-id4102 . -1) (undo-tree-id4103 . -1) (undo-tree-id4104 . -1) (undo-tree-id4105 . -1) (undo-tree-id4106 . -1) (undo-tree-id4107 . -1) (undo-tree-id4108 . -1) (undo-tree-id4109 . -1) (undo-tree-id4110 . -1) (undo-tree-id4111 . -1) (undo-tree-id4112 . -1) (undo-tree-id4113 . -1) (undo-tree-id4114 . -1) (undo-tree-id4115 . -1) (undo-tree-id4116 . -1) (undo-tree-id4117 . -1) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) 1869 (1868 . 1869) (1868 . 1869) 1872 (t 25221 57814 782107 176000)) nil (25221 57991 890038 579000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 1868) (undo-tree-id4048 . 1) (#("	" 0 1 (fontified nil)) . 1868) (undo-tree-id4049 . -1) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) (undo-tree-id4065 . -1) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) (undo-tree-id4069 . -1) (undo-tree-id4070 . -1) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) (undo-tree-id4082 . -1) (undo-tree-id4083 . -1) (1868 . 1869)) nil (25221 57991 889965 149000) 0 nil])
([nil nil ((1873 . 1878) (t 25221 57814 782107 176000) 1872) nil (25221 57991 889753 222000) 0 nil])
([nil nil ((1875 . 1879) (#("    " 0 4 (fontified nil)) . 1874) (undo-tree-id4047 . -4) (1878 . 1879)) nil (25221 57991 889749 265000) 0 nil])
([nil nil ((1879 . 1891)) nil (25221 57991 889744 162000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1886) (undo-tree-id4042 . -1) (#("o" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1887) (undo-tree-id4043 . -1) (#("d" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1888) (undo-tree-id4044 . -1) (#("i" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1889) (undo-tree-id4045 . -1) (#(" " 0 1 (fontified t)) . -1890) (undo-tree-id4046 . -1) 1891) nil (25221 57991 889738 629000) 0 nil])
([nil nil ((1886 . 1887)) nil (25221 57991 889725 339000) 0 nil])
([nil nil ((1887 . 1901)) nil (25221 57991 889723 152000) 0 nil])
([nil nil ((1901 . 1903)) nil (25221 57991 889721 27000) 0 nil])
([nil nil ((1903 . 1904)) nil (25221 57991 889718 417000) 0 nil])
([nil nil ((1904 . 1906)) nil (25221 57991 889715 996000) 0 nil])
([nil nil ((1908 . 1912) (#("    " 0 4 (fontified nil)) . 1907) (undo-tree-id4041 . -4) (1906 . 1912)) nil (25221 57991 889712 475000) 0 nil])
([nil nil ((1907 . 1911) (#("    " 0 4 (fontified nil)) . 1906) (undo-tree-id4040 . -4) (1905 . 1911)) nil (25221 57991 889706 230000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1912) (undo-tree-id4039 . -1) 1913) nil (25221 57991 889699 875000) 0 nil])
([nil nil ((1874 . 1879)) nil (25221 57991 889694 407000) 0 nil])
([nil nil ((1879 . 1880)) nil (25221 57991 889692 163000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -1879) (undo-tree-id4038 . -1) 1880) nil (25221 57991 889687 899000) 0 nil])
([nil nil ((1879 . 1888)) nil (25221 57991 889667 3000) 0 nil])
([nil nil ((1920 . 1921)) nil (25221 57991 889656 160000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1927) (undo-tree-id4120 . -1) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (undo-tree-id4123 . -1) (undo-tree-id4124 . -1) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) (undo-tree-id4129 . -1) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) (undo-tree-id4133 . -1) (undo-tree-id4134 . -1) (undo-tree-id4135 . -1) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) (undo-tree-id4142 . -1) (undo-tree-id4143 . -1) (undo-tree-id4144 . -1) (undo-tree-id4145 . -1) (undo-tree-id4146 . -1) (undo-tree-id4147 . -1) (undo-tree-id4148 . -1) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (#(" " 0 1 (fontified t)) . -1928) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) (undo-tree-id4185 . -1) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) (undo-tree-id4188 . -1) (undo-tree-id4189 . -1) (undo-tree-id4190 . -1) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) (undo-tree-id4201 . -1) (undo-tree-id4202 . -1) (undo-tree-id4203 . -1) (undo-tree-id4204 . -1) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) (#(" " 0 1 (fontified t)) . -1929) (undo-tree-id4211 . -1) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) (undo-tree-id4214 . -1) (undo-tree-id4215 . -1) (undo-tree-id4216 . -1) (undo-tree-id4217 . -1) (undo-tree-id4218 . -1) (undo-tree-id4219 . -1) (undo-tree-id4220 . -1) (undo-tree-id4221 . -1) (undo-tree-id4222 . -1) (undo-tree-id4223 . -1) (undo-tree-id4224 . -1) (undo-tree-id4225 . -1) (undo-tree-id4226 . -1) (undo-tree-id4227 . -1) (undo-tree-id4228 . -1) (undo-tree-id4229 . -1) (undo-tree-id4230 . -1) (undo-tree-id4231 . -1) (undo-tree-id4232 . -1) (undo-tree-id4233 . -1) (undo-tree-id4234 . -1) (undo-tree-id4235 . -1) (undo-tree-id4236 . -1) (undo-tree-id4237 . -1) (undo-tree-id4238 . -1) (undo-tree-id4239 . -1) (undo-tree-id4240 . -1) (undo-tree-id4241 . -1) (undo-tree-id4242 . -1) (undo-tree-id4243 . -1) (#(" " 0 1 (fontified t)) . -1930) (undo-tree-id4244 . -1) (undo-tree-id4245 . -1) (undo-tree-id4246 . -1) (undo-tree-id4247 . -1) (undo-tree-id4248 . -1) (undo-tree-id4249 . -1) (undo-tree-id4250 . -1) (undo-tree-id4251 . -1) (undo-tree-id4252 . -1) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (undo-tree-id4255 . -1) (undo-tree-id4256 . -1) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (#(" " 0 1 (fontified t)) . -1931) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (undo-tree-id4279 . -1) (undo-tree-id4280 . -1) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1) (undo-tree-id4283 . -1) (undo-tree-id4284 . -1) (undo-tree-id4285 . -1) 1932 (t 25221 57991 921991 294000)) nil (25221 57995 484041 409000) 0 nil])
([nil nil ((#("|" 0 1 (fontified t)) . -1921) (undo-tree-id4312 . -1) (undo-tree-id4313 . -1) (undo-tree-id4314 . -1) (undo-tree-id4315 . -1) (undo-tree-id4316 . -1) (undo-tree-id4317 . -1) (undo-tree-id4318 . -1) (undo-tree-id4319 . -1) (undo-tree-id4320 . -1) (undo-tree-id4321 . -1) (undo-tree-id4322 . -1) (undo-tree-id4323 . -1) (undo-tree-id4324 . -1) (undo-tree-id4325 . -1) (undo-tree-id4326 . -1) (undo-tree-id4327 . -1) (undo-tree-id4328 . -1) (undo-tree-id4329 . -1) (undo-tree-id4330 . -1) (undo-tree-id4331 . -1) (undo-tree-id4332 . -1) (undo-tree-id4333 . -1) (undo-tree-id4334 . -1) (undo-tree-id4335 . -1) (undo-tree-id4336 . -1) (undo-tree-id4337 . -1) (undo-tree-id4338 . -1) (undo-tree-id4339 . -1) 1922 (1921 . 1922) (1920 . 1921) (#("	" 0 1 (fontified t)) . 1920) (t 25221 57995 514029 500000)) nil (25221 58002 795306 407000) 0 nil])
([nil nil ((1920 . 1921) (#("	" 0 1 (fontified t)) . 1920) (undo-tree-id4286 . -1) (undo-tree-id4287 . -1) (undo-tree-id4288 . -1) (undo-tree-id4289 . -1) (undo-tree-id4290 . -1) (undo-tree-id4291 . -1) (undo-tree-id4292 . -1) (undo-tree-id4293 . -1) (undo-tree-id4294 . -1) (undo-tree-id4295 . -1) (undo-tree-id4296 . -1) (undo-tree-id4297 . -1) (undo-tree-id4298 . -1) (undo-tree-id4299 . -1) (undo-tree-id4300 . -1) (undo-tree-id4301 . -1) (undo-tree-id4302 . -1) (undo-tree-id4303 . -1) (undo-tree-id4304 . -1) (undo-tree-id4305 . -1) (undo-tree-id4306 . -1) (undo-tree-id4307 . -1) (undo-tree-id4308 . -1) (undo-tree-id4309 . -1) (undo-tree-id4310 . -1) (undo-tree-id4311 . -1)) nil (25221 58002 795164 634000) 0 nil])
([nil nil ((1920 . 1921) (#("	" 0 1 (fontified t)) . 1920) (undo-tree-id4342 . -1) (undo-tree-id4343 . -1) (undo-tree-id4344 . -1) (undo-tree-id4345 . -1) (undo-tree-id4346 . -1) (undo-tree-id4347 . -1) (undo-tree-id4348 . -1) (undo-tree-id4349 . -1) (undo-tree-id4350 . -1) (undo-tree-id4351 . -1) (undo-tree-id4352 . -1) (undo-tree-id4353 . -1) (undo-tree-id4354 . -1) (undo-tree-id4355 . -1) (undo-tree-id4356 . -1) (undo-tree-id4357 . -1) (undo-tree-id4358 . -1) (undo-tree-id4359 . -1) (undo-tree-id4360 . -1) (undo-tree-id4361 . -1) (undo-tree-id4362 . -1) (undo-tree-id4363 . -1) (undo-tree-id4364 . -1) (undo-tree-id4365 . -1) (undo-tree-id4366 . -1) (t 25221 58002 825107 261000)) nil (25221 58307 136814 946000) 0 nil])
([nil nil ((1920 . 1921) (#("	" 0 1 (fontified t)) . 1920) (undo-tree-id4341 . -1)) nil (25221 58307 136763 394000) 0 nil])
([nil nil ((1920 . 1921) (#("	" 0 1 (fontified t)) . 1920)) nil (25221 58307 136756 779000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -816) (undo-tree-id4340 . -1) 817) nil (25221 58307 136746 444000) 0 nil])
([nil nil ((1919 . 1920) (#("	" 0 1 (fontified t)) . 1919) (t 25221 58307 167349 411000)) nil (25221 59313 926289 216000) 0 nil])
([nil current ((1919 . 1920) (#("	" 0 1 (fontified t)) . 1919)) nil (25221 59313 926276 143000) 0 nil])
nil
